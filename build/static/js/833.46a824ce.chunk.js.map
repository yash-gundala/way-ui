{"version":3,"file":"static/js/833.46a824ce.chunk.js","mappings":"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","sources":["Pages/View.jsx","Pages/MultiFileUpload.jsx","Pages/Home.jsx"],"sourcesContent":["\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\nimport { Box, Button, Card, CardContent, LinearProgress, Stack } from '@mui/material';\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport DownloadIcon from '@mui/icons-material/Download';\r\nimport { Tooltip } from '@mui/material';\r\n\r\nconst View = ({ data, load, refresh, hold, download }) => {\r\n  const [loader, setLoader] = useState(true);\r\n  const [displayText, setDisplayText] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const containerRef = useRef(null);\r\n  const bottomRef = useRef(null);\r\n  useEffect(() => {\r\n    console.log(data, \"malli\", load, refresh)\r\n\r\n\r\n  }, [load, data])\r\n  useEffect(() => {\r\n    console.log(refresh, \"refresh\")\r\n    if (refresh !== 0) {\r\n      setLoader(true)\r\n      setDisplayText(null)\r\n\r\n    }\r\n\r\n  }, [refresh])\r\n\r\n\r\n  useEffect(() => {\r\n    if (!data) return;\r\n\r\n    setIsTyping(true);\r\n    setDisplayText('');\r\n    setLoader(false);\r\n    let currentIndex = 0;\r\n\r\n    const streamText = () => {\r\n      if (currentIndex < data.length) {\r\n        setDisplayText((prev) => prev + data[currentIndex]);\r\n        setProgress((currentIndex / data.length) * 100);\r\n        currentIndex++;\r\n\r\n        let delay = 10;\r\n        const char = data[currentIndex - 1];\r\n        if (['.', '!', '?', ':'].includes(char)) delay = 300;\r\n        else if ([',', ';'].includes(char)) delay = 150;\r\n        else if (char === '\\n') delay = 200;\r\n\r\n        setTimeout(streamText, delay);\r\n\r\n      } else {\r\n        setIsTyping(false);\r\n        setLoader(false);\r\n        hold(); // Call hold() after completion of streamText\r\n      }\r\n    };\r\n\r\n    streamText();\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    if (bottomRef.current) {\r\n      bottomRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [displayText]);\r\n  const reportDownload = (e) => {\r\n    download()\r\n\r\n  }\r\n\r\n  return (\r\n    loader ? (\r\n      <Stack sx={{ width: 600, mx: 'auto', mt: 4 ,mr:0,ml:2, spacing:5,}}>\r\n        <Skeleton width={300} height={30} color={\"grey\"} />\r\n        <Skeleton width={450} height={20} animation=\"wave\" />\r\n        <Skeleton width={500} height={20} animation={false} />\r\n        <Skeleton width={400} height={25} animation=\"wave\" />\r\n        <Skeleton width={600} height={20} animation={false} />\r\n        <Skeleton width={600} height={20} animation=\"wave\"/>\r\n      </Stack>\r\n    ) : (\r\n      <div className=\"flex flex-col items-center  max-w-4xl mx-auto\">\r\n        <div\r\n          ref={containerRef}\r\n          className=\"bg-white rounded-lg shadow-md border border-gray-200  min-h-[400px] max-h-[80vh] overflow-y-auto w-full\"\r\n          style={{ textAlign: 'left', fontFamily: 'Arial, sans-serif', }}\r\n        >\r\n         \r\n\r\n          <Card sx={{\r\n            margin: \"20px\",\r\n            marginTop:\"40px\",\r\n            borderRadius: \"20px\",\r\n            position: \"relative\",\r\n            overflowY: 'auto'\r\n            // paddingTop: \"40px\"  // Add padding to accommodate the Button\r\n          }}>\r\n           \r\n\r\n            <CardContent  \r\n            //  style={{border:\"2px solid red\", \r\n            // height:'68vh', overflowY:'auto'\r\n            // }}\r\n            > \r\n            \r\n                          <ReactMarkdown\r\n\r\n                        \r\n                children={displayText}\r\n                remarkPlugins={[remarkGfm]}\r\n                components={{\r\n                  // ... (rest of your components remain the same)\r\n                }}\r\n              />\r\n            </CardContent>\r\n{!isTyping && <CardContent>\r\n           <Button\r\n      sx={{\r\n        textAlign: \"right\",\r\n        // backgroundColor: \"white\",\r\n        boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\"\r\n      }}\r\n      variant=\"contained\"\r\n      onClick={(e) => { reportDownload(e) }}\r\n    >\r\n    Download Report\r\n       {/* <DownloadIcon/> */}\r\n    </Button> \r\n    </CardContent>}\r\n          </Card>\r\n\r\n\r\n\r\n          {isTyping && (\r\n            <span className=\"inline-block w-2 h-4 ml-1 bg-blue-500 animate-pulse\" />\r\n          )}\r\n          <div ref={bottomRef} />\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n    )\r\n  );\r\n};\r\n\r\nexport default View;\r\n\r\n{/* <div className=\"flex flex-col items-center max-w-4xl mx-auto\" style={{ overflowY: 'auto', maxHeight: 'calc(80vh - 40px)' }}>\r\n  <div\r\n    ref={containerRef}\r\n    className=\"bg-white rounded-lg shadow-md border border-gray-200 min-h-[400px] w-full\"\r\n    style={{\r\n      fontFamily: 'Arial, sans-serif',\r\n      overflowY: 'auto',\r\n      position: 'relative', // This keeps the content within the bounds\r\n    }}\r\n  >\r\n    <Card sx={{ margin: '20px', borderRadius: '20px', overflowY: 'auto', maxHeight: 'calc(80vh - 80px)' }}>\r\n      <CardContent>\r\n        <ReactMarkdown\r\n          children={displayText}\r\n          remarkPlugins={[remarkGfm]}\r\n        />\r\n      </CardContent>\r\n      {!isTyping && (\r\n        <CardContent>\r\n          <Button\r\n            sx={{ textAlign: 'right', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}\r\n            variant=\"contained\"\r\n            onClick={reportDownload}\r\n          >\r\n            Download Report\r\n          </Button>\r\n        </CardContent>\r\n      )}\r\n    </Card>\r\n    {isTyping && (\r\n      <span className=\"inline-block w-2 h-4 ml-1 bg-blue-500 animate-pulse\" />\r\n    )}\r\n    <div ref={bottomRef} />\r\n  </div>\r\n</div> */}\r\n\r\n","\r\nimport React, { useEffect, useState } from 'react';\r\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\r\nimport ImageIcon from '@mui/icons-material/Image';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport ZoomInIcon from '@mui/icons-material/ZoomIn';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\nimport ExpandIcon from './../assets/images/expand.png'\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\nimport { Tooltip } from '@mui/material';\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  Typography, \r\n  Box, \r\n  Button, \r\n  Switch,\r\n  IconButton,\r\n  Grid,\r\n  Stack,\r\n  Paper,\r\n  Alert,\r\n  TextField,\r\n  Dialog,\r\n  DialogContent\r\n} from '@mui/material';\r\nimport Generate from './../assets/images/generate.png'\r\n\r\n\r\nconst MultiFileUpload = ({handleData,load,handleClear, singlePage,handleFullScreen,buttonDisable,holdButton,fullScreen}) => {\r\n  const [files, setFiles] = useState([]);\r\n  const [showThumbnail, setShowThumbnail] = useState(false);\r\n  const [dragActive, setDragActive] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [imageUrl, setImageUrl] = useState('');\r\n  const [enlargedImage, setEnlargedImage] = useState(null);\r\nconsole.log(singlePage,\"sizesizev\")\r\n  useEffect(() => {\r\n    handleData(files)\r\n  }, [files, handleData])\r\n\r\n  const isValidImageUrl = (url) => {\r\n    return url.match(/\\.(jpeg|jpg|png)$/i);\r\n  };\r\n\r\n\r\n  const createFileFromUrl = async (url) => {\r\n    try {\r\n      const response = await fetch(url);\r\n      const blob = await response.blob();\r\n      const fileName = url.substring(url.lastIndexOf('/') + 1);\r\n      return new File([blob], fileName, { type: blob.type });\r\n    } catch (error) {\r\n      throw new Error('Invalid image URL');\r\n    }\r\n  };\r\n\r\n  // const handleUrlPaste = async (e) => {\r\n  //   const url = e.target.value.trim();\r\n  //   setImageUrl(url);\r\n\r\n  //   if (!url) return;\r\n\r\n  //   if (!isValidImageUrl(url)) {\r\n  //     setError('Invalid image URL. Only JPG, JPEG, and PNG formats are supported.');\r\n  //     setTimeout(() => setError(''), 3000);\r\n  //     return;\r\n  //   }\r\n\r\n  //   try {\r\n  //     const file = await createFileFromUrl(url);\r\n  //     if (isDuplicateFile(file)) {\r\n  //       setError(`Duplicate file: ${file.name}`);\r\n  //       setTimeout(() => setError(''), 3000);\r\n  //     } else {\r\n  //       setFiles(prevFiles => [...prevFiles, file]);\r\n  //       setImageUrl('');\r\n  //     }\r\n  //   } catch (error) {\r\n  //     setError('Unable to load image from URL. Please check the URL and try again.');\r\n  //     setTimeout(() => setError(''), 3000);\r\n  //   }\r\n  // };\r\n\r\n  // second version\r\n\r\n\r\n  \r\n  const handleUrlPaste = async (e) => {\r\n    const url = e.target.value.trim();\r\n    setImageUrl(url);\r\n    if (!url) return;\r\n    // if (!isValidImageUrl(url)) {\r\n    //   setError('Invalid image URL. Only JPG, JPEG, and PNG formats are supported.');\r\n    //   setTimeout(() => setError(''), 3000);\r\n    //   return;\r\n    // }\r\n    try {\r\n      const file = await createFileFromUrl(url);\r\n      if (isDuplicateFile(file)) {\r\n        setError(`Duplicate file: ${file.name}`);\r\n        setTimeout(() => setError(''), 3000);\r\n      } else {\r\n        setFiles(prevFiles => [...prevFiles, file]);\r\n        setImageUrl('');\r\n      }\r\n    } catch (error) {\r\n      setError('Unable to load image from URL. Please check the URL and try again.');\r\n      setTimeout(() => setError(''), 3000);\r\n    }\r\n  };\r\n\r\n  const isDuplicateFile = (newFile) => {\r\n    return files.some(existingFile => \r\n      existingFile.name === newFile.name && \r\n      existingFile.size === newFile.size\r\n    );\r\n  };\r\n\r\n  const processFiles = (newFiles) => {\r\n    const duplicates = [];\r\n    const validFiles = [];\r\n\r\n    Array.from(newFiles).forEach(file => {\r\n      if (isDuplicateFile(file)) {\r\n        duplicates.push(file.name);\r\n      } else {\r\n        validFiles.push(file);\r\n      }\r\n    });\r\n\r\n    if (duplicates.length > 0) {\r\n      setError(`Duplicate file(s) detected: ${duplicates.join(', ')}`);\r\n      setTimeout(() => setError(''), 3000);\r\n    }\r\n\r\n    if (validFiles.length > 0) {\r\n      setFiles(prevFiles => [...prevFiles, ...validFiles]);\r\n    }\r\n  };\r\n\r\n  const handleDrag = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\r\n      setDragActive(true);\r\n    } else if (e.type === \"dragleave\") {\r\n      setDragActive(false);\r\n    }\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDragActive(false);\r\n    processFiles(e.dataTransfer.files);\r\n  };\r\n\r\n  const handleFileSelect = (e) => {\r\n    processFiles(e.target.files);\r\n    e.target.value = null; // clear the input value to allow re-selection of the same file\r\n  };\r\n\r\n  // const removeFile = (indexToRemove) => {\r\n  //   setFiles(prevFiles => prevFiles.filter((_, index) => index !== indexToRemove));\r\n  // };\r\n  const removeFile = (indexToRemove) => {\r\n    setFiles(prevFiles => {\r\n      const updatedFiles = prevFiles.filter((_, index) => index !== indexToRemove);\r\n\r\n        // Check if all files are removed\r\n        if (updatedFiles?.length === 0) {\r\n          handleClear(); // Trigger clear/refresh\r\n      }\r\n      return [...updatedFiles];  // return a new array to force re-render\r\n    });\r\n    \r\n    // Small delay to allow re-render and reset state\r\n    setTimeout(() => setFiles(files => [...files]), 0);\r\n  };\r\n  \r\n  const removeAll = () => {\r\n    handleClear([])\r\n    setFiles([]);\r\n  };\r\n//   useEffect(() => {\r\n//   if ((Array.isArray(files) && files.length === 0) || files === null) {\r\n//     handleClear([]);\r\n//   }\r\n// }, [files]);\r\n\r\n\r\n  const handleEnlarge = (file) => {\r\n    setEnlargedImage(URL.createObjectURL(file));\r\n  };\r\n\r\n  const handleCloseEnlarged = () => {\r\n    setEnlargedImage(null);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ maxWidth: 'auto', mx: 'auto', mt:!singlePage?6:2}}>\r\n      <CardContent sx={{ pt: 0, p: 0 }}>\r\n        <Stack spacing={0.8}>\r\n          {error && (\r\n            <Alert severity=\"error\" onClose={() => setError('')}>\r\n              {error}\r\n            </Alert>\r\n          )}\r\n\r\n          <Paper\r\n            variant=\"outlined\"\r\n            sx={{\r\n              // p: load?0:2,\r\n              p: !singlePage?8:2,\r\n              backgroundColor: \"#F6F7F8\",\r\n              border: '1.5px dashed',\r\n              borderColor: dragActive ? 'primary.main' : 'grey.300',\r\n              cursor: 'pointer',\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              borderRadius:\"20px\",\r\n              gap: 0.5,\r\n            \r\n            }}\r\n            onDragEnter={handleDrag}\r\n            onDragLeave={handleDrag}\r\n            onDragOver={handleDrag}\r\n            onDrop={handleDrop}\r\n          >\r\n            <Box sx={{ \r\n              p:0, \r\n              bgcolor: 'primary.50', \r\n              borderRadius: '50%',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center'\r\n            }}>\r\n              <CloudUploadIcon sx={{ fontSize: 32, color: 'primary.main' }} />\r\n            </Box>\r\n            <Box sx={{ textAlign: 'center', mb:!singlePage?1:1 }}>\r\n              <Typography variant={singlePage ? \"body1\" : \"h6\"} >\r\n                Drop or select file <label style={{ \r\n                  cursor: 'pointer',\r\n                  color:\"blue\",\r\n                  textDecoration: 'underline'\r\n                }}>\r\n                  Browse\r\n                  <input\r\n                    type=\"file\"\r\n                    hidden\r\n                    multiple\r\n                    onChange={handleFileSelect}\r\n                  />\r\n                </label>\r\n              </Typography>\r\n              <Typography  variant={singlePage ? \"body2\" : \"body\"}color=\"text.secondary\">\r\n                Limit 200 MB per file.\r\n                \r\n                {' '}Supported Formats: JPG, JPEG, PNG.\r\n              </Typography>\r\n            </Box>\r\n          </Paper>\r\n          \r\n          <Typography variant=\"h6\" sx={{padding:\"0px\", margin:0, marginTop:0,alignSelf:\"center\"}}>\r\n            or\r\n          </Typography>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            sx={{\r\n              backgroundColor: \"#F6F7F8\",\r\n              border: '1.5px dashed',\r\n              borderColor: dragActive ? 'primary.main' : 'grey.300',\r\n              cursor: 'pointer',\r\n              display: 'flex',\r\n              borderRadius:\"10px\",\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              p: !singlePage?1.5:1,\r\n              gap: 1\r\n            }}\r\n          >\r\n            <Box sx={{ textAlign: 'center', width: '100%' }}>\r\n              {/* <TextField \r\n                size=\"small\" \r\n                placeholder=\"Paste image URL here\" \r\n                fullWidth \r\n                variant=\"standard\"\r\n                value={imageUrl}\r\n                onChange={(e) => setImageUrl(e.target.value)}\r\n                onBlur={handleUrlPaste}\r\n                onKeyPress={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    handleUrlPaste(e);\r\n                  }\r\n                }}\r\n                InputProps={{\r\n                  disableUnderline: true,\r\n                }}\r\n                sx={{\r\n                  paddingLeft:\"10px\",\r\n                  '& .MuiInputBase-root': {\r\n                    borderBottom: 'none',\r\n                  },\r\n                }}\r\n              /> */}\r\n              <TextField \r\n  size=\"small\" \r\n  placeholder=\"Paste image URL here\" \r\n  fullWidth \r\n  variant=\"standard\"\r\n  value={imageUrl}\r\n  onChange={(e) => setImageUrl(e.target.value)}\r\n  onBlur={handleUrlPaste}\r\n  onKeyPress={(e) => {\r\n    if (e.key === 'Enter') {\r\n      handleUrlPaste(e);\r\n    }\r\n  }}\r\n  InputProps={{\r\n    disableUnderline: true,\r\n  }}\r\n  sx={{\r\n    paddingLeft:\"10px\",\r\n    '& .MuiInputBase-root': {\r\n      borderBottom: 'none',\r\n    },\r\n  }}\r\n/>\r\n            </Box>\r\n          </Paper>\r\n         \r\n    { files?.length > 0 &&     (<Box sx={{ display: 'flex', margin:0,p:0, alignItems: 'center', justifyContent: 'flex-end' }}>\r\n  <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.2 }}>\r\n  {/* <Typography variant=\"body2\">Preview Thumbnail</Typography> */}\r\n  <Button\r\n        variant=\"outlined\"\r\n        color=\"error\"\r\n        size=\"small\"\r\n        sx={{\r\n          color: '#637381',\r\n          borderColor: '#637381',\r\n          '&:hover': {\r\n            borderColor: '#212B36',\r\n            color: '#212B36',\r\n          },\r\n        }}\r\n        onClick={removeAll}\r\n      >\r\n        Clear All\r\n      </Button>\r\n    {/* <Switch\r\n    size='small'\r\n      checked={showThumbnail}\r\n      onChange={(e) => setShowThumbnail(e.target.checked)}\r\n    /> */}\r\n    \r\n  </Box>\r\n</Box>)\r\n}\r\n\r\n{files?.length > 0 && (\r\n  <>\r\n    <Stack\r\n      sx={{\r\n        height: \"160px\", // Adjusted stack height\r\n        // border: '1px solid #e0e0e0',\r\n        // borderRadius: 1,\r\n        // maxHeight:'160px'\r\n        // width:'60%'\r\n        \r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          height: '100%',\r\n          overflowY: 'auto',\r\n          p: 1,\r\n          \r\n        }}\r\n      >\r\n        {!showThumbnail ? (\r\n          <Grid container spacing={1} sx={{ minHeight: '100%' ,display:\"flex\",justifyContent: fullScreen ? 'center' : 'flex-start',alignItems:'center'}}>\r\n            {files?.map((file, index) => (\r\n              <Grid item xs={!fullScreen ? 4 : 5} key={index} sx={{ marginBottom: 1,display:\"flex\",justifyContent: fullScreen ? 'center' : 'flex-start',alignItems:'center' }} >\r\n                <Box\r\n                  sx={{\r\n                    position: 'relative',\r\n                    width: '100%',\r\n                    paddingTop: '70%', // Adjusted padding for the smaller stack height\r\n                    borderRadius: 1,\r\n                    overflow: 'hidden',\r\n                  }}\r\n                >\r\n                  {file.type.startsWith('image/') ? (\r\n                    <Box\r\n                      component=\"img\"\r\n                      src={URL.createObjectURL(file)}\r\n                      alt={file.name}\r\n                      sx={{\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        objectFit: 'cover',\r\n                        \r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    <Box\r\n                      sx={{\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        bgcolor: '#00A76F',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        color: 'white',\r\n                      }}\r\n                    >\r\n                      <ImageIcon sx={{ fontSize: 20 }} />\r\n                    </Box>\r\n                  )}\r\n                 \r\n                  <IconButton\r\n                    size=\"small\"\r\n                    onClick={() => removeFile(index)}\r\n                    sx={{\r\n                      position: 'absolute',\r\n                      top: 2,\r\n                      right: 2,\r\n                      color: '#fff',\r\n                      bgcolor: 'rgba(0, 0, 0, 0.5)',\r\n                      '&:hover': {\r\n                        bgcolor: 'rgba(0, 0, 0, 0.7)',\r\n                      },\r\n                      padding: '2px',\r\n                    }}\r\n                  >\r\n                    <CloseIcon sx={{ fontSize: 12 }} />\r\n                  </IconButton>\r\n                  <IconButton\r\n                    size=\"small\"\r\n                    onClick={() => handleEnlarge(file)}\r\n                    sx={{\r\n                      position: 'absolute',\r\n                      bottom: 2,\r\n                      right: 2,\r\n                      color: '#fff',\r\n                      bgcolor: 'rgba(0, 0, 0, 0.5)',\r\n                      '&:hover': {\r\n                        bgcolor: 'rgba(0, 0, 0, 0.7)',\r\n                      },\r\n                      padding: '2px',\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={ExpandIcon}\r\n                      alt=\"Expand Logo\"\r\n                      style={{\r\n                        width: \"15px\",\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </Box>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        ) : (\r\n          <Stack spacing={1} sx={{ minHeight: '100%' }}>\r\n            {files?.map((file, index) => (\r\n              <Box\r\n                key={index}\r\n                sx={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  gap: 1,\r\n                  p: 0.5,\r\n                  bgcolor: '#f8f9fa',\r\n                  borderRadius: 1,\r\n                }}\r\n              >\r\n                <Box\r\n                  sx={{\r\n                    width: 20,\r\n                    height: 20,\r\n                    bgcolor: '#00A76F',\r\n                    borderRadius: 0.5,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    color: 'white',\r\n                  }}\r\n                >\r\n                  <ImageIcon sx={{ fontSize: 12 }} />\r\n                </Box>\r\n                <Box sx={{ flexGrow: 1, minWidth: 0 }}>\r\n                  <Typography\r\n                    variant=\"caption\"\r\n                    sx={{\r\n                      color: '#212B36',\r\n                      fontWeight: 500,\r\n                      display: 'block',\r\n                      overflow: 'hidden',\r\n                      textOverflow: 'ellipsis',\r\n                      whiteSpace: 'nowrap',\r\n                    }}\r\n                  >\r\n                    {file?.name}\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"caption\"\r\n                    sx={{\r\n                      color: '#637381',\r\n                      fontSize: '0.6rem',\r\n                    }}\r\n                  >\r\n                    {(file.size < 1024 * 1024\r\n                      ? `${(file.size / 1024).toFixed(2)} KB`\r\n                      : `${(file.size / 1024 / 1024).toFixed(2)} MB`)}\r\n                  </Typography>\r\n                </Box>\r\n                <IconButton\r\n                  size=\"small\"\r\n                  onClick={() => removeFile(index)}\r\n                  sx={{\r\n                    color: '#637381',\r\n                    '&:hover': {\r\n                      color: '#212B36',\r\n                    },\r\n                    padding: 0,\r\n                  }}\r\n                >\r\n                  <CloseIcon sx={{ fontSize: 12 }} />\r\n                </IconButton>\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        )}\r\n      </Box>\r\n    </Stack>\r\n    <Box \r\n        sx={{ \r\n          // position: 'fixed',\r\n          // top: 0,\r\n          // left: 0,\r\n          // right: 0,\r\n          // height: '60px',\r\n          // zIndex: 1000,\r\n          // backgroundColor: 'white',\r\n          justifyContent:\"center\",\r\n          \r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          padding: '0 20px'\r\n        }}\r\n      >\r\n      <Button \r\n  onClick={handleFullScreen} \r\n  variant=\"contained\" \r\n  color=\"primary\" \r\n  disabled={buttonDisable || holdButton}\r\n  startIcon={\r\n    <Box\r\n      component=\"img\"\r\n     src={Generate}\r\n      alt=\"Company Logo\"\r\n      sx={{\r\n        width: \"24px\", // Adjust as needed\r\n        height: \"24px\",\r\n      }}\r\n    />\r\n  }\r\n  sx={{\r\n    borderRadius: \"50px\",\r\n    transition: \"opacity 0.3s ease, transform 0.3s ease\",\r\n    // opacity: buttonDisable || holdButton ? 0.5 : 1,\r\n    // transform: buttonDisable || holdButton ? \"scale(0.95)\" : \"scale(1)\"\r\n  }}\r\n>\r\n  Generate\r\n</Button>\r\n</Box>\r\n    {/* <Box\r\n      sx={{\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        alignItems: 'flex-end',\r\n        mt: 2,\r\n      }}\r\n    >\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"error\"\r\n        size=\"small\"\r\n        sx={{\r\n          color: '#637381',\r\n          borderColor: '#637381',\r\n          '&:hover': {\r\n            borderColor: '#212B36',\r\n            color: '#212B36',\r\n          },\r\n        }}\r\n        onClick={removeAll}\r\n      >\r\n        Clear All\r\n      </Button>\r\n    </Box> */}\r\n  </>\r\n)}\r\n\r\n\r\n        </Stack>\r\n      </CardContent>\r\n     \r\n      \r\n\r\n\r\n<Dialog\r\n      open={!!enlargedImage}\r\n      onClose={handleCloseEnlarged}\r\n      maxWidth={false}\r\n      fullWidth\r\n      PaperProps={{\r\n        style: {\r\n          backgroundColor: 'transparent',\r\n          boxShadow: 'none',\r\n          margin: 0,\r\n          width: '30%',\r\n          maxWidth: '30%',\r\n        },\r\n      }}\r\n      BackdropProps={{\r\n        style: {\r\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        },\r\n      }}\r\n    >\r\n      <DialogContent\r\n        className=\"p-0 flex justify-center items-center\"\r\n        style={{\r\n          padding: 0,\r\n          height: '100vh',\r\n          width: '100%',\r\n          maxWidth: '100%',\r\n          maxHeight: '40vh',\r\n          margin: 0,\r\n        }}\r\n      >\r\n        <img\r\n          src={enlargedImage}\r\n          alt=\"Enlarged view\"\r\n          className=\"w-full h-full object-contain\"\r\n          style={{\r\n            width: '90%',\r\n            height: '90%',\r\n          }}\r\n        />\r\n      </DialogContent>\r\n    </Dialog>\r\n\r\n      \r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MultiFileUpload;\r\n\r\n\r\n\r\n","\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { Button, Typography, Box, Autocomplete, TextField } from '@mui/material';\r\nimport View from \"./View\";\r\nimport MultiFileUpload from './MultiFileUpload';\r\nimport AutoAwesomeIcon from '@mui/icons-material/AutoAwesome';\r\nimport Logo from './../assets/images/logo.png';\r\nimport Generate from './../assets/images/generate.png'\r\nimport BackImage from './../assets/images/upload-png.png';\r\nimport { io } from \"socket.io-client\";\r\nimport axios from 'axios';\r\nimport jsPDF from \"jspdf\";\r\nimport { marked } from \"marked\";\r\nimport html2canvas from \"html2canvas\";\r\nimport { PDFDocument } from \"pdf-lib\"; // To merge PDF files\r\n\r\nconst Home = () => {\r\n  const [loader,setLoader]=useState(false)\r\n  const list = [\r\n    { name: \"Claude-3.5-Sonnet\", Id: \"claude\" },\r\n    { name: \"GPT-4o\", Id: \"openai\" },\r\n    { name: \"Gemini-1.5-flash\", Id: \"gemini\" },\r\n    \r\n    // { name: \"GPT 3\", Id: \"3\" }\r\n  ];\r\n  const [count, setCount]=useState(1)\r\n\r\n  const [fullScreen, setFullScreen] = useState(false);\r\n  const [selectedModel, setSelectedModel] = useState(list[0]);\r\n  const [filesData, setFilesData] = useState([]);\r\n  const [socketTrue, setSocketTrue] = useState(false);\r\n  const [streamData, setStreamData] = useState(null);\r\n  const socketRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const wsRef = useRef(null);\r\n  const isConnectedRef = useRef(false);\r\nconsole.log(streamData,fullScreen,\"suruuu\")\r\n  const initializeSocket = async() => {\r\n    // Initialize socket connection\r\n    const client = new WebSocket(\"ws://192.168.1.81:8000\");\r\n\r\n    wsRef.current = client; // Store the WebSocket instance in a ref\r\n\r\n    client.onopen = () => {\r\n      console.log('Connected to WebSocket server');\r\n      isConnectedRef.current = true; // Set connection state flag on successful open\r\n      const initMessage = {\r\n        message: 'init',\r\n       \r\n      };\r\n      client.send(JSON.stringify(initMessage));\r\n    };\r\n\r\n\r\n\r\n    socketRef.current = io(\"https://192.168.1.81:8000\", {\r\n      transports: [\"websocket\"], // Use websocket as the transport method\r\n      // You can add any other options as needed here\r\n    });\r\n\r\n    socketRef.current.on(\"connect\", () => {\r\n      console.log(\"Connected to server\");\r\n      \r\n      // Send initial analysis request with files\r\n      sendAnalysisRequest();\r\n      \r\n      // Set up interval for periodic requests\r\n      intervalRef.current = setInterval(() => {\r\n        sendAnalysisRequest();\r\n      }, 5000);\r\n    });\r\n\r\n    socketRef.current.on(\"chunk\", (data) => {\r\n      console.log(\"Received chunk:\", data.data);\r\n      setStreamData(prevData => prevData ? prevData + data.data : data.data);\r\n    });\r\n\r\n    socketRef.current.on(\"completed\", () => {\r\n      console.log(\"Analysis completed\");\r\n      // Clear interval when analysis is complete\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    });\r\n\r\n    socketRef.current.on(\"error\", (error) => {\r\n      console.error(\"Error:\", error.message);\r\n    });\r\n  };\r\n\r\n  const sendAnalysisRequest = () => {\r\n    if (socketRef.current && filesData.length > 0) {\r\n      const formData = new FormData();\r\n      filesData.forEach((file) => {\r\n        formData.append('images', file);\r\n      });\r\n      formData.append('model', 'claude');\r\n\r\n      socketRef.current.emit(\"analyze\", {\r\n        model: \"claude\",\r\n        formData: formData\r\n      });\r\n    }\r\n  };\r\nconst [firstUpload, setFirstUpload]=useState(false)\r\n  const handleFullScreen = async () => {\r\n    setFullScreen(true);\r\n    setSocketTrue(true);\r\n    setCount(fullScreen?count+1:0)\r\n\r\n    \r\n    try {\r\n         // Then initialize socket connection\r\n        //  await initializeSocket();\r\n      // First make the initial API call\r\n      await handleApiCall(filesData);\r\n      \r\n      // Then initialize socket connection\r\n    //    initializeSocket();\r\n    } catch (error) {\r\n      console.error(\"Error in handleFullScreen:\", error);\r\n    }\r\n  };\r\nconst [buttonDisable,setButtonDisable]=useState(true)\r\nconsole.log(\"llllllll\",buttonDisable,filesData)\r\n  const handleImageData = (data) => {\r\n  \r\n    \r\n\r\n    if(data && data?.length > 0){\r\n      setButtonDisable(false)\r\n      console.log(\"lllllllllllkkk\",buttonDisable,data?.length)\r\n      if (!fullScreen){\r\n        setFirstUpload(true)\r\n      }\r\n      console.log(fullScreen,firstUpload,\"fullScreen\")\r\n    }\r\n    \r\n    console.log(\"lllllllllll\",buttonDisable,data?.length)\r\n    setFilesData(data);\r\n  };\r\nconst handleClearData=(data)=>{\r\n  console.log(data,\"llllmmmmm\")\r\n  setFilesData([]);\r\n  setButtonDisable(true)\r\n}\r\nconst[holdButton,setHoldButton]=useState(false)\r\nconsole.log(holdButton,buttonDisable,\"buttonDisable\")\r\nconst handleHoldButton=()=>{\r\n  setHoldButton(false)\r\n\r\n}\r\n  const handleApiCall = async (Data) => {\r\n    try {\r\n      console.log(selectedModel,\"selectedModel\")\r\n      const formData = new FormData();\r\n      \r\n      if (Data && Array.isArray(Data)) {\r\n        Data.forEach((file) => {\r\n          formData.append('images', file);\r\n        });\r\n      }\r\n      \r\n      formData.append('model', selectedModel?.Id);\r\n      setLoader(true)\r\n      setHoldButton(true)\r\n      const response = await axios.post(\r\n        // 'http://192.168.1.81:8000/api/v1/analyze/stream',\r\n        // 'http://localhost:8000/api/v1/analyze/stream',\r\n        `https://waytool.thankfulriver-bb957f46.koreacentral.azurecontainerapps.io/api/v1/analyze/stream`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n        }\r\n      );\r\n\r\n      setStreamData(response.data);\r\n      setLoader(true)\r\n    } catch (error) {\r\n      console.error('API request failed:', error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Cleanup socket connection when component unmounts or when fullScreen is turned off\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n      }\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n \r\n// download pdf \r\n\r\n// const downloadPDF = async () => {\r\n//   try {\r\n//     const pdf = new jsPDF();\r\n//     const pageHeight = pdf.internal.pageSize.height;\r\n//     const pageWidth = pdf.internal.pageSize.width;\r\n//     const margin = 10; // Margin around the image\r\n//     let yOffset = margin; // Start at the top margin\r\n\r\n//     for (let i = 0; i < filesData.length; i++) {\r\n//       const file = filesData[i];\r\n      \r\n//       // Convert File object to data URL\r\n//       const dataUrl = await new Promise((resolve, reject) => {\r\n//         const reader = new FileReader();\r\n//         reader.onload = () => resolve(reader.result);\r\n//         reader.onerror = reject;\r\n//         reader.readAsDataURL(file);\r\n//       });\r\n\r\n//       // Create temporary image element\r\n//       const img = new Image();\r\n//       await new Promise((resolve, reject) => {\r\n//         img.onload = resolve;\r\n//         img.onerror = reject;\r\n//         img.src = dataUrl;\r\n//       });\r\n\r\n//       // Calculate dimensions while maintaining aspect ratio\r\n//       const imgAspectRatio = img.width / img.height;\r\n//       const imgWidth = pageWidth - 2 * margin;\r\n//       const imgHeight = imgWidth / imgAspectRatio;\r\n\r\n//       // Check if image fits on current page; if not, add new page\r\n//       if (yOffset + imgHeight > pageHeight - margin) {\r\n//         pdf.addPage();\r\n//         yOffset = margin; // Reset yOffset for new page\r\n//       }\r\n\r\n//       // Add image to PDF\r\n//       pdf.addImage(\r\n//         dataUrl,\r\n//         'JPEG',\r\n//         margin,\r\n//         yOffset,\r\n//         imgWidth,\r\n//         imgHeight\r\n//       );\r\n\r\n//       yOffset += imgHeight + margin; // Update yOffset for next image\r\n//     }\r\n\r\n//     // Save the PDF\r\n//     pdf.save(\"images.pdf\");\r\n//   } catch (error) {\r\n//     console.error(\"Error generating PDF:\", error);\r\n//     alert(\"Error generating PDF. Please check your images and try again.\");\r\n//   }\r\n// };\r\n\r\n// version 2 download\r\nasync function convertSvgToPng(dataUrl) {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    img.src = dataUrl;\r\n    img.onload = () => {\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(img, 0, 0);\r\n      resolve(canvas.toDataURL(\"image/png\"));\r\n    };\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n// const downloadPDF = async () => {\r\n//   try {\r\n//     const pdf = new jsPDF();\r\n//     const pageHeight = pdf.internal.pageSize.height;\r\n//     const pageWidth = pdf.internal.pageSize.width;\r\n//     const margin = 10;\r\n//     let yOffset = margin;\r\n\r\n//     for (let i = 0; i < filesData.length; i++) {\r\n//       const file = filesData[i];\r\n//       const fileType = file.type;\r\n\r\n//       if (fileType.startsWith(\"image/\")) {\r\n//         let dataUrl;\r\n        \r\n//         if (fileType === \"image/svg+xml\") {\r\n//           // Convert SVG to PNG\r\n//           dataUrl = await convertSvgToPng(await readFileAsDataUrl(file));\r\n//         } else {\r\n//           // Read image file as data URL\r\n//           dataUrl = await readFileAsDataUrl(file);\r\n//         }\r\n\r\n//         const img = new Image();\r\n//         await new Promise((resolve, reject) => {\r\n//           img.onload = resolve;\r\n//           img.onerror = reject;\r\n//           img.src = dataUrl;\r\n//         });\r\n\r\n//         // Calculate dimensions\r\n//         const imgAspectRatio = img.width / img.height;\r\n//         const imgWidth = pageWidth - 2 * margin;\r\n//         const imgHeight = imgWidth / imgAspectRatio;\r\n\r\n//         if (yOffset + imgHeight > pageHeight - margin) {\r\n//           pdf.addPage();\r\n//           yOffset = margin;\r\n//         }\r\n\r\n//         pdf.addImage(dataUrl, \"JPEG\", margin, yOffset, imgWidth, imgHeight);\r\n//         yOffset += imgHeight + margin;\r\n\r\n//       } else if (fileType === \"application/pdf\") {\r\n//         // Merge PDFs\r\n//         const existingPdfBytes = await file.arrayBuffer();\r\n//         const existingPdf = await PDFDocument.load(existingPdfBytes);\r\n//         const copiedPages = await pdf.copyPages(existingPdf, existingPdf.getPageIndices());\r\n\r\n//         copiedPages.forEach((page) => {\r\n//           pdf.addPage(page);\r\n//         });\r\n//       }\r\n//     }\r\n\r\n//     pdf.save(\"merged_document.pdf\");\r\n//   } catch (error) {\r\n//     console.error(\"Error generating PDF:\", error);\r\n//     alert(\"Error generating PDF. Please check your files and try again.\");\r\n//   }\r\n// };\r\n\r\n// async function readFileAsDataUrl(file) {\r\n//   return new Promise((resolve, reject) => {\r\n//     const reader = new FileReader();\r\n//     reader.onload = () => resolve(reader.result);\r\n//     reader.onerror = reject;\r\n//     reader.readAsDataURL(file);\r\n//   });\r\n// }\r\n\r\n// versionv3\r\n// Helper function to render markdown as an image with larger text\r\nconst renderMarkdownToImage = async (markdownText) => {\r\n  // Convert markdown to HTML\r\n  const htmlContent = marked(markdownText);\r\n\r\n  // Create a hidden div to render the HTML content\r\n  const container = document.createElement(\"div\");\r\n  container.innerHTML = htmlContent;\r\n\r\n  // Apply some styling to the container to increase font size\r\n  container.style.position = \"absolute\";\r\n  container.style.left = \"-9999px\"; // Hide it offscreen\r\n  container.style.fontSize = \"23px\"; // Increase text size\r\n  container.style.lineHeight = \"1.6\"; // Adjust line height for readability\r\n  container.style.fontFamily = \"Arial, sans-serif\"; // Use a common font\r\n  container.style.width = \"100%\"; // Allow it to stretch to fit the content\r\n\r\n  // Append to the body temporarily to render\r\n  document.body.appendChild(container);\r\n\r\n  // Render the container as an image\r\n  const canvas = await html2canvas(container);\r\n  document.body.removeChild(container); // Clean up after rendering\r\n  return canvas.toDataURL(\"image/png\");\r\n};\r\n\r\n// Function to read file as data URL\r\nasync function readFileAsDataUrl(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = reject;\r\n    reader.readAsDataURL(file);\r\n  });\r\n}\r\n\r\nconst downloadPDF = async () => {\r\n  try {\r\n    const pdf = new jsPDF();\r\n    const pageHeight = pdf.internal.pageSize.height;\r\n    const pageWidth = pdf.internal.pageSize.width;\r\n    const margin = 10; // Margin around the content\r\n    let yOffset = margin;\r\n\r\n    // 1. Add images to the PDF\r\n    for (let i = 0; i < filesData.length; i++) {\r\n      const file = filesData[i];\r\n      const fileType = file.type;\r\n\r\n      if (fileType.startsWith(\"image/\")) {\r\n        let dataUrl;\r\n        \r\n        if (fileType === \"image/svg+xml\") {\r\n          dataUrl = await convertSvgToPng(await readFileAsDataUrl(file));\r\n        } else {\r\n          dataUrl = await readFileAsDataUrl(file);\r\n        }\r\n\r\n        const img = new Image();\r\n        await new Promise((resolve, reject) => {\r\n          img.onload = resolve;\r\n          img.onerror = reject;\r\n          img.src = dataUrl;\r\n        });\r\n\r\n        // Calculate dimensions without enlarging images\r\n        const imgAspectRatio = img.width / img.height;\r\n        const maxImgWidth = pageWidth - 2 * margin;\r\n        const imgWidth = Math.min(img.width, maxImgWidth);\r\n        const imgHeight = imgWidth / imgAspectRatio;\r\n\r\n        if (yOffset + imgHeight > pageHeight - margin) {\r\n          pdf.addPage();\r\n          yOffset = margin;\r\n        }\r\n\r\n        pdf.addImage(dataUrl, \"JPEG\", margin, yOffset, imgWidth, imgHeight);\r\n        yOffset += imgHeight + margin;\r\n      } else if (fileType === \"application/pdf\") {\r\n        const existingPdfBytes = await file.arrayBuffer();\r\n        const existingPdf = await PDFDocument.load(existingPdfBytes);\r\n        const copiedPages = await pdf.copyPages(existingPdf, existingPdf.getPageIndices());\r\n\r\n        copiedPages.forEach((page) => {\r\n          pdf.addPage(page);\r\n        });\r\n      }\r\n    }\r\n\r\n    // 2. Render markdown content as image and add it to PDF\r\n    if (streamData) {\r\n      const markdownImage = await renderMarkdownToImage(streamData);\r\n\r\n      // Add a new page if necessary for the markdown content\r\n      if (yOffset + pageHeight > pageHeight - margin) {\r\n        pdf.addPage();\r\n        yOffset = margin;\r\n      }\r\n\r\n      // Add markdown image to the PDF\r\n      pdf.addImage(markdownImage, \"PNG\", margin, yOffset, pageWidth - 2 * margin, 0);\r\n    }\r\n\r\n    // Save the PDF\r\n    pdf.save(`Visual_assessment_report_with_${selectedModel?.name}.pdf`);\r\n  } catch (error) {\r\n    console.error(\"Error generating PDF:\", error);\r\n    alert(\"Error generating PDF. Please check your files and try again.\");\r\n  }\r\n};\r\n\r\n  // Rest of your component JSX remains the same...\r\n  return (\r\n    <Box sx={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>\r\n      {/* Fixed Header */}\r\n      <Box \r\n        sx={{ \r\n          // position: 'fixed',\r\n          // top: 0,\r\n          // left: 0,\r\n          // right: 0,\r\n          height: '60px',\r\n          zIndex: 1000,\r\n          // backgroundColor: 'white',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          padding: '0 20px'\r\n        }}\r\n      >\r\n        <img\r\n          src={Logo}\r\n          // src={Generate}\r\n          alt=\"Company Logo\"\r\n          style={{\r\n            width: \"150px\",\r\n          }}\r\n        />\r\n      </Box>\r\n\r\n      {/* Main Content Area */}\r\n      <Box\r\n        sx={{\r\n          flexGrow: 0.5,\r\n          p:2,\r\n          // marginTop: '60px', // Match header height\r\n          backgroundImage: `url(${BackImage})`,\r\n          backgroundSize: 'cover',\r\n          backgroundPosition: 'center',\r\n          backgroundRepeat: 'no-repeat',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          height: 'calc(100vh - 60px)', // Subtract header height\r\n          overflow: 'hidden' // Prevent overall page scroll\r\n        }}\r\n      >\r\n        {/* Left Panel */}\r\n        <Box\r\n          sx={{\r\n            padding:1,\r\n            \r\n            width: fullScreen ? \"30%\" : \"40%\",\r\n            height: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column'\r\n          }}\r\n        >\r\n          {/* Fixed Content Area */}\r\n          <Box sx={{ flexShrink: 0 }}>\r\n            <Typography \r\n              variant=\"h6\" \r\n              sx={{\r\n                fontWeight: 400,\r\n                fontFamily: 'Roboto, sans-serif',\r\n                fontSize: fullScreen ? \"25px\" : \"30px\",\r\n                marginBottom: 1\r\n              }}\r\n            >\r\n              Way.com Visual Assessment Tool\r\n            </Typography>\r\n            {/* <button onClick={downloadPDF}>Download All Images as PDF</button> */}\r\n            \r\n            <Autocomplete\r\n              size=\"small\"\r\n              disableClearable\r\n              options={list}\r\n              getOptionLabel={(option) => option.name}\r\n              value={selectedModel}\r\n              onChange={(event, newValue) => {\r\n                setSelectedModel(newValue);\r\n              }}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    ...params.InputProps,\r\n                    sx: {\r\n                      borderRadius: '30px',\r\n                      width: fullScreen ? \"53%\" : \"40%\",\r\n                      marginTop:2,\r\n                      backgroundColor: \"black\",\r\n                      color: \"white\",\r\n                      '& .MuiSvgIcon-root': {\r\n                        color: 'white',\r\n                      }\r\n                    },\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Box>\r\n\r\n          {/* Scrollable Upload Area */}\r\n          <Box \r\n            sx={{\r\n              marginTop: !firstUpload?3:1,\r\n              // p:?1:0,\r\n              // p:!firstUpload?3:0,\r\n              flexGrow:  1,\r\n              // overflow: 'auto',\r\n              height: 0, // This forces the box to scroll\r\n              minHeight: '100px' // Ensure minimum height for content\r\n            }}\r\n          >\r\n            <MultiFileUpload \r\n              handleData={handleImageData} \r\n              load={fullScreen}  \r\n              // singlePage={count}\r\n              singlePage={firstUpload}\r\n              handleClear={handleClearData}\r\n              handleFullScreen={handleFullScreen}\r\n              buttonDisable={buttonDisable}\r\n              holdButton={holdButton}\r\n              fullScreen={fullScreen}\r\n            />\r\n          </Box>\r\n      \r\n          {/* Fixed Button Area */}\r\n          <Box \r\n            sx={{\r\n              flexShrink: 0,\r\n              // padding: \"10px\",\r\n              backgroundColor: 'inherit',\r\n              textAlign: 'center'\r\n            }}\r\n          >\r\n           {/* <Button \r\n  onClick={handleFullScreen} \r\n  variant=\"contained\" \r\n  color=\"primary\" \r\n  disabled={buttonDisable || holdButton}\r\n  startIcon={\r\n    <Box\r\n      component=\"img\"\r\n     src={Generate}\r\n      alt=\"Company Logo\"\r\n      sx={{\r\n        width: \"24px\", // Adjust as needed\r\n        height: \"24px\",\r\n      }}\r\n    />\r\n  }\r\n  sx={{\r\n    borderRadius: \"50px\",\r\n    transition: \"opacity 0.3s ease, transform 0.3s ease\",\r\n    opacity: buttonDisable || holdButton ? 0.5 : 1,\r\n    transform: buttonDisable || holdButton ? \"scale(0.95)\" : \"scale(1)\"\r\n  }}\r\n>\r\n  Generate\r\n</Button> */}\r\n\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* Right Panel */}\r\n        {fullScreen && (\r\n          <Box\r\n            sx={{\r\n              padding: 0.7,\r\n              // margin:1,\r\n              width: \"65%\",\r\n              height: '100%',\r\n              overflowY: 'auto'\r\n            }}\r\n          >\r\n            <View \r\n            style={{borderWidth:\"2px solid #ccc\"}}\r\n              data={streamData}  \r\n              load={loader} \r\n              refresh={count} \r\n              hold={handleHoldButton}\r\n              download={downloadPDF}\r\n            />\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n"],"names":["_ref","data","load","refresh","hold","download","loader","setLoader","useState","displayText","setDisplayText","isTyping","setIsTyping","progress","setProgress","containerRef","useRef","bottomRef","useEffect","console","log","currentIndex","streamText","length","prev","delay","char","includes","setTimeout","current","scrollIntoView","behavior","_jsxs","Stack","sx","width","mx","mt","mr","ml","spacing","children","_jsx","Skeleton","height","color","animation","className","ref","style","textAlign","fontFamily","Card","margin","marginTop","borderRadius","position","overflowY","CardContent","ReactMarkdown","remarkPlugins","remarkGfm","components","Button","boxShadow","variant","onClick","e","handleData","handleClear","singlePage","handleFullScreen","buttonDisable","holdButton","fullScreen","files","setFiles","showThumbnail","setShowThumbnail","dragActive","setDragActive","error","setError","imageUrl","setImageUrl","enlargedImage","setEnlargedImage","handleUrlPaste","async","url","target","value","trim","file","response","fetch","blob","fileName","substring","lastIndexOf","File","type","Error","createFileFromUrl","isDuplicateFile","name","prevFiles","newFile","some","existingFile","size","processFiles","newFiles","duplicates","validFiles","Array","from","forEach","push","join","handleDrag","preventDefault","stopPropagation","removeFile","indexToRemove","updatedFiles","filter","_","index","Box","maxWidth","pt","p","Alert","severity","onClose","Paper","backgroundColor","border","borderColor","cursor","display","flexDirection","alignItems","gap","onDragEnter","onDragLeave","onDragOver","onDrop","dataTransfer","bgcolor","justifyContent","CloudUploadIcon","fontSize","mb","Typography","textDecoration","hidden","multiple","onChange","padding","alignSelf","TextField","placeholder","fullWidth","onBlur","onKeyPress","key","InputProps","disableUnderline","paddingLeft","borderBottom","removeAll","_Fragment","minHeight","map","ImageIcon","flexGrow","minWidth","fontWeight","overflow","textOverflow","whiteSpace","toFixed","IconButton","CloseIcon","Grid","container","item","xs","marginBottom","paddingTop","startsWith","component","src","URL","createObjectURL","alt","top","left","objectFit","right","handleEnlarge","bottom","disabled","startIcon","transition","Dialog","open","handleCloseEnlarged","PaperProps","BackdropProps","DialogContent","maxHeight","Home","list","Id","count","setCount","setFullScreen","selectedModel","setSelectedModel","filesData","setFilesData","socketTrue","setSocketTrue","streamData","setStreamData","socketRef","intervalRef","firstUpload","setFirstUpload","setButtonDisable","setHoldButton","handleApiCall","formData","FormData","Data","isArray","append","axios","post","headers","message","convertSvgToPng","dataUrl","Promise","resolve","reject","img","Image","onload","canvas","document","createElement","getContext","drawImage","toDataURL","onerror","disconnect","clearInterval","readFileAsDataUrl","reader","FileReader","result","readAsDataURL","zIndex","Logo","backgroundImage","BackImage","backgroundSize","backgroundPosition","backgroundRepeat","flexShrink","Autocomplete","disableClearable","options","getOptionLabel","option","event","newValue","renderInput","params","MultiFileUpload","View","borderWidth","handleHoldButton","pdf","jsPDF","pageHeight","internal","pageSize","pageWidth","yOffset","i","fileType","imgAspectRatio","maxImgWidth","imgWidth","Math","min","imgHeight","addPage","addImage","existingPdfBytes","arrayBuffer","existingPdf","PDFDocument","copyPages","getPageIndices","page","markdownImage","htmlContent","marked","markdownText","innerHTML","lineHeight","body","appendChild","html2canvas","removeChild","renderMarkdownToImage","save","alert"],"sourceRoot":""}