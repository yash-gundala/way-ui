{"version":3,"file":"static/js/833.b297be35.chunk.js","mappings":"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","sources":["Pages/View.jsx","Pages/MultiFileUpload.jsx","Pages/Home.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import ReactMarkdown from 'react-markdown';\r\n// import remarkGfm from 'remark-gfm';\r\n// import { Box, Button, Card, CardContent, LinearProgress, Stack } from '@mui/material';\r\n// import Skeleton from '@mui/material/Skeleton';\r\n// import DownloadIcon from '@mui/icons-material/Download';\r\n// import { Tooltip } from '@mui/material';\r\n\r\n// const View = ({ data, load, refresh, hold, download }) => {\r\n//   const [loader, setLoader] = useState(true);\r\n//   const [displayText, setDisplayText] = useState('');\r\n//   const [isTyping, setIsTyping] = useState(false);\r\n//   const [progress, setProgress] = useState(0);\r\n//   const containerRef = useRef(null);\r\n//   const bottomRef = useRef(null);\r\n//   useEffect(() => {\r\n//     console.log(data, \"malli\", load, refresh)\r\n\r\n\r\n//   }, [load, data])\r\n//   useEffect(() => {\r\n//     console.log(refresh, \"refresh\")\r\n//     if (refresh !== 0) {\r\n//       setLoader(true)\r\n//       setDisplayText(null)\r\n\r\n//     }\r\n\r\n//   }, [refresh])\r\n\r\n\r\n//   useEffect(() => {\r\n//     if (!data) return;\r\n\r\n//     setIsTyping(true);\r\n//     setDisplayText('');\r\n//     setLoader(false);\r\n//     let currentIndex = 0;\r\n\r\n//     const streamText = () => {\r\n//       if (currentIndex < data.length) {\r\n//         setDisplayText((prev) => prev + data[currentIndex]);\r\n//         setProgress((currentIndex / data.length) * 100);\r\n//         currentIndex++;\r\n\r\n//         let delay = 10;\r\n//         const char = data[currentIndex - 1];\r\n//         if (['.', '!', '?', ':'].includes(char)) delay = 300;\r\n//         else if ([',', ';'].includes(char)) delay = 150;\r\n//         else if (char === '\\n') delay = 200;\r\n\r\n//         setTimeout(streamText, delay);\r\n\r\n//       } else {\r\n//         setIsTyping(false);\r\n//         setLoader(false);\r\n//         hold(); // Call hold() after completion of streamText\r\n//       }\r\n//     };\r\n\r\n//     streamText();\r\n//   }, [data]);\r\n\r\n//   useEffect(() => {\r\n//     if (bottomRef.current) {\r\n//       bottomRef.current.scrollIntoView({ behavior: 'smooth' });\r\n//     }\r\n//   }, [displayText]);\r\n//   const reportDownload = (e) => {\r\n//     download()\r\n\r\n//   }\r\n\r\n//   return (\r\n//     loader ? (\r\n//       <Stack sx={{ width: 600, mx: 'auto', mt: 4 ,mr:0,ml:2, spacing:5,}}>\r\n//         <Skeleton width={300} height={30} color={\"grey\"} />\r\n//         <Skeleton width={450} height={20} animation=\"wave\" />\r\n//         <Skeleton width={500} height={20} animation={false} />\r\n//         <Skeleton width={400} height={25} animation=\"wave\" />\r\n//         <Skeleton width={600} height={22} animation={false} />\r\n//         <Skeleton width={600} height={21} animation=\"wave\"/>\r\n//       </Stack>\r\n//     ) : (\r\n//       <div className=\"flex flex-col items-center  max-w-4xl mx-auto\">\r\n//         <div\r\n//           ref={containerRef}\r\n//           className=\"bg-white rounded-lg shadow-md border border-gray-200  min-h-[400px] max-h-[80vh] overflow-y-auto w-full\"\r\n//           style={{ textAlign: 'left', fontFamily: 'Arial, sans-serif', }}\r\n//         >\r\n         \r\n\r\n//           <Card sx={{\r\n//             margin: \"20px\",\r\n//             // marginTop:\"40px\",\r\n//             borderRadius: \"20px\",\r\n//             position: \"relative\",\r\n//             overflowY: 'auto'\r\n            \r\n//             // paddingTop: \"40px\"  // Add padding to accommodate the Button\r\n//           }}>\r\n           \r\n\r\n//             <CardContent  \r\n//             //  style={{border:\"2px solid red\", \r\n//             // height:'68vh', overflowY:'auto'\r\n//             // }}\r\n//             > \r\n            \r\n//                           <ReactMarkdown\r\n\r\n                        \r\n//                 children={displayText}\r\n//                 remarkPlugins={[remarkGfm]}\r\n//                 components={{\r\n//                   // ... (rest of your components remain the same)\r\n//                 }}\r\n//               />\r\n//             </CardContent>\r\n// {!isTyping && <CardContent>\r\n//            <Button\r\n//       sx={{\r\n//         textAlign: \"right\",\r\n//         // backgroundColor: \"white\",\r\n//         boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\"\r\n//       }}\r\n//       variant=\"contained\"\r\n//       onClick={(e) => { reportDownload(e) }}\r\n//     >\r\n//     Download Report\r\n       \r\n//     </Button> \r\n//     </CardContent>}\r\n//           </Card>\r\n\r\n\r\n\r\n//           {isTyping && (\r\n//             <span className=\"inline-block w-2 h-4 ml-1 bg-blue-500 animate-pulse\" />\r\n//           )}\r\n//           <div ref={bottomRef} />\r\n//         </div>\r\n//       </div>\r\n\r\n\r\n\r\n//     )\r\n//   );\r\n// };\r\n\r\n// export default View;\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import ReactMarkdown from 'react-markdown';\r\n// import remarkGfm from 'remark-gfm';\r\n// import { Box, Button, Card, CardContent, Stack } from '@mui/material';\r\n// import Skeleton from '@mui/material/Skeleton';\r\n\r\n// const View = ({ data, load, refresh, hold, download }) => {\r\n//   const [loader, setLoader] = useState(true);\r\n//   const [displayText, setDisplayText] = useState('');\r\n//   const [isTyping, setIsTyping] = useState(false);\r\n//   const containerRef = useRef(null);\r\n//   const bottomRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     if (refresh !== 0) {\r\n//       setLoader(true);\r\n//       setDisplayText(null);\r\n//     }\r\n//   }, [refresh]);\r\n\r\n//   useEffect(() => {\r\n//     if (!data) return;\r\n\r\n//     setIsTyping(true);\r\n//     setDisplayText('');\r\n//     setLoader(false);\r\n//     let currentIndex = 0;\r\n\r\n//     const streamText = () => {\r\n//       if (currentIndex < data.length) {\r\n//         setDisplayText((prev) => prev + data[currentIndex]);\r\n//         currentIndex++;\r\n\r\n//         let delay = 10;\r\n//         const char = data[currentIndex - 1];\r\n//         if (['.', '!', '?', ':'].includes(char)) delay = 300;\r\n//         else if ([',', ';'].includes(char)) delay = 150;\r\n//         else if (char === '\\n') delay = 200;\r\n\r\n//         setTimeout(streamText, delay);\r\n//       } else {\r\n//         setIsTyping(false);\r\n//         setLoader(false);\r\n//         hold();\r\n//       }\r\n//     };\r\n\r\n//     streamText();\r\n//   }, [data]);\r\n\r\n//   useEffect(() => {\r\n//     if (bottomRef.current) {\r\n//       bottomRef.current.scrollIntoView({ behavior: 'smooth' });\r\n//     }\r\n//   }, [displayText]);\r\n\r\n//   return (\r\n//     <Box \r\n//       sx={{ \r\n//         position: 'fixed',\r\n//         top: '80px', // Adjust based on your header height\r\n//         right: '20px',\r\n//         bottom: '30px',\r\n//         width: '65%',\r\n//         display: 'flex',\r\n//         flexDirection: 'column',\r\n//         overflow: 'hidden'\r\n//       }}\r\n//     >\r\n//       <Card\r\n//         sx={{\r\n//           height: '100%',\r\n//           display: 'flex',\r\n//           flexDirection: 'column',\r\n//           margin: '0',\r\n//           borderRadius: '20px',\r\n//           overflow: 'hidden',\r\n//         }}\r\n//       >\r\n//         <Box\r\n//           sx={{\r\n//             flex: 1,\r\n//             overflowY: 'auto',\r\n//             minHeight: 0, // Important for flex child scrolling\r\n//             position: 'relative',\r\n//             '&::-webkit-scrollbar': {\r\n//               width: '8px',\r\n//             },\r\n//             '&::-webkit-scrollbar-track': {\r\n//               background: '#f1f1f1',\r\n//             },\r\n//             '&::-webkit-scrollbar-thumb': {\r\n//               background: '#888',\r\n//               borderRadius: '4px',\r\n//             },\r\n//             '&::-webkit-scrollbar-thumb:hover': {\r\n//               background: '#555',\r\n//             },\r\n//           }}\r\n//         >\r\n//           <CardContent>\r\n//             {loader ? (\r\n//               <Stack spacing={2} sx={{ pt: 2 }}>\r\n//                 <Skeleton width=\"50%\" height={30} />\r\n//                 <Skeleton width=\"75%\" height={20} animation=\"wave\" />\r\n//                 <Skeleton width=\"83%\" height={20} animation={false} />\r\n//                 <Skeleton width=\"67%\" height={25} animation=\"wave\" />\r\n//                 <Skeleton width=\"100%\" height={22} animation={false} />\r\n//                 <Skeleton width=\"100%\" height={21} animation=\"wave\" />\r\n//                 <Skeleton width=\"90%\" height={22} animation={false} />\r\n//                 <Skeleton width=\"85%\" height={21} animation=\"wave\" />\r\n//                 <Skeleton width=\"95%\" height={22} animation={false} />\r\n//                 <Skeleton width=\"80%\" height={21} animation=\"wave\" />\r\n//               </Stack>\r\n//             ) : (\r\n//               <>\r\n//                 <ReactMarkdown\r\n//                   children={displayText}\r\n//                   remarkPlugins={[remarkGfm]}\r\n//                 />\r\n//                 {isTyping && (\r\n//                   <span className=\"inline-block w-2 h-4 ml-1 bg-blue-500 animate-pulse\" />\r\n//                 )}\r\n//                 <div ref={bottomRef} />\r\n//               </>\r\n//             )}\r\n//           </CardContent>\r\n//         </Box>\r\n\r\n//         {!isTyping && !loader && (\r\n//           <Box sx={{ \r\n//             borderTop: '1px solid rgba(0, 0, 0, 0.12)', \r\n//             p: 2,\r\n//             backgroundColor: 'white',\r\n//           }}>\r\n//             <Button\r\n//               variant=\"contained\"\r\n//               onClick={download}\r\n//               sx={{\r\n//                 boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\"\r\n//               }}\r\n//             >\r\n//               Download Report\r\n//             </Button>\r\n//           </Box>\r\n//         )}\r\n//       </Card>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// export default View;\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import ReactMarkdown from 'react-markdown';\r\n// import remarkGfm from 'remark-gfm';\r\n// import { Box, Button, Card, CardContent, Stack } from '@mui/material';\r\n// import Skeleton from '@mui/material/Skeleton';\r\n\r\n// const View = ({ data, load, refresh, hold, download }) => {\r\n//   const [loader, setLoader] = useState(true);\r\n//   const [displayText, setDisplayText] = useState('');\r\n//   const [isTyping, setIsTyping] = useState(false);\r\n//   const containerRef = useRef(null);\r\n//   const bottomRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     if (refresh !== 0) {\r\n//       setLoader(true);\r\n//       setDisplayText(null);\r\n//     }\r\n//   }, [refresh]);\r\n\r\n//   useEffect(() => {\r\n//     if (!data) return;\r\n\r\n//     setIsTyping(true);\r\n//     setDisplayText('');\r\n//     setLoader(false);\r\n//     let currentIndex = 0;\r\n\r\n//     const streamText = () => {\r\n//       if (currentIndex < data.length) {\r\n//         setDisplayText((prev) => prev + data[currentIndex]);\r\n//         currentIndex++;\r\n\r\n//         let delay = 10;\r\n//         const char = data[currentIndex - 1];\r\n//         if (['.', '!', '?', ':'].includes(char)) delay = 300;\r\n//         else if ([',', ';'].includes(char)) delay = 150;\r\n//         else if (char === '\\n') delay = 200;\r\n\r\n//         setTimeout(streamText, delay);\r\n//       } else {\r\n//         setIsTyping(false);\r\n//         setLoader(false);\r\n//         hold();\r\n//       }\r\n//     };\r\n\r\n//     streamText();\r\n//   }, [data]);\r\n\r\n//   useEffect(() => {\r\n//     if (bottomRef.current) {\r\n//       bottomRef.current.scrollIntoView({ behavior: 'smooth' });\r\n//     }\r\n//   }, [displayText]);\r\n\r\n//   return (\r\n//     <Box \r\n//       sx={{ \r\n//         position: 'fixed',\r\n//         top: '80px',\r\n//         right: '20px',\r\n//         bottom: '20px',\r\n//         width: '65%',\r\n//         display: 'flex',\r\n//         flexDirection: 'column',\r\n//         overflow: 'hidden'\r\n//       }}\r\n//     >\r\n//       <Card\r\n//         sx={{\r\n//           height: '100%',\r\n//           display: 'flex',\r\n//           flexDirection: 'column',\r\n//           margin: '0',\r\n//           borderRadius: '20px',\r\n//           position: 'relative',\r\n         \r\n//         }}\r\n//       >\r\n//         <Box\r\n//           sx={{\r\n//             flex: 1,\r\n//             overflowY: 'auto',\r\n//             minHeight: 0,\r\n//             '&::-webkit-scrollbar': {\r\n//               width: '8px',\r\n//             },\r\n//             '&::-webkit-scrollbar-track': {\r\n//               background: '#f1f1f1',\r\n//             },\r\n//             '&::-webkit-scrollbar-thumb': {\r\n//               background: '#888',\r\n//               borderRadius: '4px',\r\n//             },\r\n//             '&::-webkit-scrollbar-thumb:hover': {\r\n//               background: '#555',\r\n//             },\r\n//           }}\r\n//         >\r\n//           <CardContent sx={{ pb: '80px' ,}}> {/* Increased padding to prevent content from being hidden behind the button */}\r\n//             {loader ? (\r\n//               <Stack spacing={2} sx={{ pt: 2 }}>\r\n//                 <Skeleton width=\"50%\" height={30} />\r\n//                 <Skeleton width=\"75%\" height={20} animation=\"wave\" />\r\n//                 <Skeleton width=\"83%\" height={20} animation={false} />\r\n//                 <Skeleton width=\"67%\" height={25} animation=\"wave\" />\r\n//                 <Skeleton width=\"100%\" height={22} animation={false} />\r\n//                 <Skeleton width=\"100%\" height={21} animation=\"wave\" />\r\n//                 <Skeleton width=\"90%\" height={22} animation={false} />\r\n//                 <Skeleton width=\"85%\" height={21} animation=\"wave\" />\r\n//                 <Skeleton width=\"95%\" height={22} animation={false} />\r\n//                 <Skeleton width=\"80%\" height={21} animation=\"wave\" />\r\n//               </Stack>\r\n//             ) : (\r\n//               <>\r\n//                 <ReactMarkdown\r\n//                   children={displayText}\r\n//                   remarkPlugins={[remarkGfm]}\r\n//                 />\r\n//                 {isTyping && (\r\n//                   <span className=\"inline-block w-2 h-4 ml-1 bg-blue-500 animate-pulse\" />\r\n//                 )}\r\n//                 <div ref={bottomRef} />\r\n//               </>\r\n//             )}\r\n//           </CardContent>\r\n//         </Box>\r\n\r\n//         {!isTyping && !loader && (\r\n//           <Box sx={{ \r\n//             position: 'absolute',\r\n//             bottom: 0,\r\n//             left: 0,\r\n//             right: 0,\r\n//             borderTop: '1px solid rgba(0, 0, 0, 0.12)', \r\n//             p: 2,\r\n//             backgroundColor: 'white',\r\n//             boxShadow: '0px -4px 6px -1px rgba(0, 0, 0, 0.1)',\r\n//             borderBottomLeftRadius: '20px',\r\n//             borderBottomRightRadius: '20px',\r\n//           }}>\r\n//             <Button\r\n//               variant=\"contained\"\r\n//               onClick={download}\r\n//               sx={{\r\n//                 boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\"\r\n//               }}\r\n//             >\r\n//               Download Report\r\n//             </Button>\r\n//           </Box>\r\n//         )}\r\n//       </Card>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// export default View;\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\nimport { Box, Button, Card, CardContent, Stack } from '@mui/material';\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport FileDownloadIcon from '@mui/icons-material/FileDownload';\r\n\r\nconst View = ({ data, load, refresh, hold, download }) => {\r\n  const [loader, setLoader] = useState(true);\r\n  const [displayText, setDisplayText] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const containerRef = useRef(null);\r\n  const bottomRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (refresh !== 0) {\r\n      setLoader(true);\r\n      setDisplayText(null);\r\n    }\r\n  }, [refresh]);\r\n\r\n  useEffect(() => {\r\n    if (!data) return;\r\n\r\n    setIsTyping(true);\r\n    setDisplayText('');\r\n    setLoader(false);\r\n    let currentIndex = 0;\r\n\r\n    const streamText = () => {\r\n      if (currentIndex < data.length) {\r\n        setDisplayText((prev) => prev + data[currentIndex]);\r\n        currentIndex++;\r\n\r\n        let delay = 10;\r\n        const char = data[currentIndex - 1];\r\n        if (['.', '!', '?', ':'].includes(char)) delay = 300;\r\n        else if ([',', ';'].includes(char)) delay = 150;\r\n        else if (char === '\\n') delay = 200;\r\n\r\n        setTimeout(streamText, delay);\r\n      } else {\r\n        setIsTyping(false);\r\n        setLoader(false);\r\n        hold();\r\n      }\r\n    };\r\n\r\n    streamText();\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    if (bottomRef.current) {\r\n      bottomRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [displayText]);\r\n\r\n  return (\r\n    <Box \r\n      sx={{ \r\n        position: 'fixed',\r\n        top: '80px',\r\n        right: '20px',\r\n        bottom: '20px',\r\n        width: '65%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n      }}\r\n    >\r\n      <Card\r\n        sx={{\r\n          height: '100%',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          margin: '0',\r\n          borderRadius: '20px',\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            flex: 1,\r\n            overflowY: 'auto',\r\n            minHeight: 0,\r\n            paddingBottom: '72px', // Increased padding to account for button height + padding\r\n            '&::-webkit-scrollbar': {\r\n              width: '8px',\r\n            },\r\n            '&::-webkit-scrollbar-track': {\r\n              background: '#f1f1f1',\r\n            },\r\n            '&::-webkit-scrollbar-thumb': {\r\n              background: '#888',\r\n              borderRadius: '4px',\r\n            },\r\n            '&::-webkit-scrollbar-thumb:hover': {\r\n              background: '#555',\r\n            },\r\n          }}\r\n        >\r\n          <CardContent>\r\n            {loader ? (\r\n              <Stack spacing={2} sx={{ pt: 2 }}>\r\n                <Skeleton width=\"50%\" height={30} />\r\n                <Skeleton width=\"75%\" height={20} animation=\"wave\" />\r\n                <Skeleton width=\"83%\" height={20} animation={false} />\r\n                <Skeleton width=\"67%\" height={25} animation=\"wave\" />\r\n                <Skeleton width=\"100%\" height={22} animation={false} />\r\n                <Skeleton width=\"100%\" height={21} animation=\"wave\" />\r\n                <Skeleton width=\"90%\" height={22} animation={false} />\r\n                <Skeleton width=\"85%\" height={21} animation=\"wave\" />\r\n                <Skeleton width=\"95%\" height={22} animation={false} />\r\n                <Skeleton width=\"80%\" height={21} animation=\"wave\" />\r\n              </Stack>\r\n            ) : (\r\n              <>\r\n                <ReactMarkdown\r\n                  children={displayText}\r\n                  remarkPlugins={[remarkGfm]}\r\n                />\r\n                {isTyping && (\r\n                  <span className=\"inline-block w-2 h-4 ml-1 bg-blue-500 animate-pulse\" />\r\n                )}\r\n                <div ref={bottomRef} />\r\n              </>\r\n            )}\r\n          </CardContent>\r\n        </Box>\r\n\r\n        {!isTyping && !loader && (\r\n          <Box sx={{ \r\n            position: 'absolute',\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            borderTop: '1px solid rgba(0, 0, 0, 0.12)', \r\n            p: 2,\r\n            backgroundColor: 'white',\r\n            boxShadow: '0px -4px 6px -1px rgba(0, 0, 0, 0.1)',\r\n            borderBottomLeftRadius: '20px',\r\n            borderBottomRightRadius: '20px',\r\n            gap: 1 \r\n          }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={download}\r\n              sx={{\r\n                boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\"\r\n              }}\r\n            >\r\n              <FileDownloadIcon sx={{marginRight:1}}/>\r\n              Download Report\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default View;","\r\nimport React, { useEffect, useState } from 'react';\r\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\r\nimport ImageIcon from '@mui/icons-material/Image';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport ZoomInIcon from '@mui/icons-material/ZoomIn';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\nimport ExpandIcon from './../assets/images/expand.png'\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\nimport Generate from './../assets/images/generate.png'\r\nimport FileDownloadIcon from '@mui/icons-material/FileDownload';\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  Typography, \r\n  Box, \r\n  Button, \r\n  Switch,\r\n  IconButton,\r\n  Grid,\r\n  Stack,\r\n  Paper,\r\n  Alert,\r\n  TextField,\r\n  Dialog,\r\n  DialogContent\r\n} from '@mui/material';\r\n\r\n\r\nconst MultiFileUpload = ({ handleData, load, handleClear, singlePage,buttonDisable,handleFullScreen, holdButton}) => {\r\n  const [files, setFiles] = useState([]);\r\n  const [showThumbnail, setShowThumbnail] = useState(false);\r\n  const [dragActive, setDragActive] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [imageUrl, setImageUrl] = useState('');\r\n  const [enlargedImage, setEnlargedImage] = useState(null);\r\nconsole.log(singlePage,\"singlePage\")\r\n  useEffect(() => {\r\n    handleData(files);\r\n  }, [files, handleData]);\r\n\r\n  const isValidImageUrl = (url) => url.match(/\\.(jpeg|jpg|png)$/i);\r\n\r\n  const createFileFromUrl = async (url) => {\r\n    try {\r\n      const response = await fetch(url);\r\n      const blob = await response.blob();\r\n      const fileName = url.substring(url.lastIndexOf('/') + 1);\r\n      return new File([blob], fileName, { type: blob.type });\r\n    } catch (error) {\r\n      throw new Error('Invalid image URL');\r\n    }\r\n  };\r\n\r\n  const handleUrlPaste = async (e) => {\r\n\r\n    console.log(e?.target?.value,\"kkkkkkkkkkkkkkk\")\r\n    const url = e.target.value.trim();\r\n    setImageUrl(url);\r\nif (!e?.target?.value){\r\n  return\r\n}\r\n    // if (!url) return;\r\n\r\n    // if (!isValidImageUrl(url)) {\r\n    //   setError('Invalid image URL. Only JPG, JPEG, and PNG formats are supported.');\r\n    //   setTimeout(() => setError(''), 3000);\r\n    //   return;\r\n    // }\r\n\r\n    try {\r\n      const file = await createFileFromUrl(url);\r\n      if (isDuplicateFile(file)) {\r\n        setError(`Duplicate file: ${file.name}`);\r\n        setTimeout(() => setError(''), 3000);\r\n      } else {\r\n        setFiles((prevFiles) => [...prevFiles, file]);\r\n        setImageUrl('');\r\n      }\r\n    } catch (error) {\r\n      console.log(error,\"errorerror\")\r\n      setError('Unable to load image from URL. Please check the URL and try again.');\r\n      setTimeout(() => setError(''), 3000);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const isDuplicateFile = (newFile) =>\r\n    files.some((existingFile) => existingFile.name === newFile.name && existingFile.size === newFile.size);\r\n\r\n  const processFiles = (newFiles) => {\r\n    const duplicates = [];\r\n    const validFiles = [];\r\n\r\n    Array.from(newFiles).forEach((file) => {\r\n      if (isDuplicateFile(file)) {\r\n        duplicates.push(file.name);\r\n      } else {\r\n        validFiles.push(file);\r\n      }\r\n    });\r\n\r\n    if (duplicates.length > 0) {\r\n      setError(`Duplicate file(s) detected: ${duplicates.join(', ')}`);\r\n      setTimeout(() => setError(''), 3000);\r\n    }\r\n\r\n    if (validFiles.length > 0) {\r\n      setFiles((prevFiles) => [...prevFiles, ...validFiles]);\r\n    }\r\n  };\r\n\r\n  const handleDrag = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (e.type === 'dragenter' || e.type === 'dragover') {\r\n      setDragActive(true);\r\n    } else if (e.type === 'dragleave') {\r\n      setDragActive(false);\r\n    }\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDragActive(false);\r\n    processFiles(e.dataTransfer.files);\r\n  };\r\n\r\n  const handleFileSelect = (e) => {\r\n    processFiles(e.target.files);\r\n    e.target.value = null; // clear the input value to allow re-selection of the same file\r\n  };\r\n\r\n  const removeFile = (indexToRemove) => {\r\n    setFiles((prevFiles) => {\r\n      const updatedFiles = prevFiles.filter((_, index) => index !== indexToRemove);\r\n      if (updatedFiles.length === 0) {\r\n        handleClear();\r\n      }\r\n      return [...updatedFiles];\r\n    });\r\n    setTimeout(() => setFiles((files) => [...files]), 0);\r\n  };\r\n\r\n  const removeAll = () => {\r\n    handleClear([]);\r\n    setFiles([]);\r\n  };\r\n\r\n  const handleEnlarge = (file) => {\r\n    setEnlargedImage(URL.createObjectURL(file));\r\n  };\r\n\r\n  const handleCloseEnlarged = () => {\r\n    setEnlargedImage(null);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\r\n  \r\n    <Paper\r\n  variant=\"outlined\"\r\n  sx={{\r\n    // p: !singlePage ? 4 : 0,\r\n    p: {\r\n      xs: 1, // Small devices\r\n      md: !singlePage ? 2 : 1, // Medium devices\r\n      lg:  !singlePage ? 4 : 1, // Large devices\r\n      xl: !singlePage? 5:2, // Extra-large devices\r\n    },\r\n    backgroundColor: '#F6F7F8',\r\n    border: `1.5px dashed ${dragActive ? 'primary.main' : 'grey.300'}`,\r\n    borderRadius: '20px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    gap: 0.5,\r\n    cursor: 'pointer',\r\n    // mb: 2,\r\n  }}\r\n  onDragEnter={handleDrag}\r\n  onDragLeave={handleDrag}\r\n  onDragOver={handleDrag}\r\n  onDrop={handleDrop}\r\n>\r\n  <Box sx={{ p: 0, bgcolor: 'primary.50', borderRadius: '50%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n    <CloudUploadIcon sx={{ fontSize: 32, color: 'primary.main' }} />\r\n  </Box>\r\n  <Box sx={{ textAlign: 'center', mb: !singlePage ? 1 : 1 }}>\r\n    <Typography\r\n      variant={singlePage ? 'body1' : 'h6'}\r\n      sx={{\r\n        fontSize: {\r\n          xs: '1rem', // Small devices\r\n          md: '1.125rem', // Medium devices\r\n          lg: load?\"1rem\":'1.125rem', // Large devices\r\n          xl: '1.75rem', // Extra-large devices and above\r\n        },\r\n      }}\r\n    >\r\n      Drop or select file{' '}\r\n      <label style={{ cursor: 'pointer', color: 'blue', textDecoration: 'underline' }}>\r\n        Browse\r\n        <input type=\"file\" hidden multiple onChange={handleFileSelect} />\r\n      </label>\r\n    </Typography>\r\n  {!load && <Typography\r\n    variant={singlePage ? 'body2' : 'body'}\r\n    color=\"text.secondary\"\r\n    sx={{\r\n      fontSize: {\r\n        xs: '0.6rem', // Small devices\r\n        md: '0.5rem', // Medium devices\r\n        lg: '1rem', // Large devices\r\n        xl: '1.125rem', // Extra-large devices and above\r\n      },\r\n    }}\r\n  >\r\n    Limit 200 MB per file. Supported Formats: JPG, JPEG, PNG.\r\n  </Typography>}\r\n  </Box>\r\n</Paper>\r\n\r\n\r\n    <Typography variant=\"h6\" sx={{ padding: '0px', margin: 1,  alignSelf: 'center', textAlign: \"center\", \r\n    // fontSize: {\r\n    //       xs: '0.6rem', // Small devices\r\n    //       md: '1.125rem', // Medium devices\r\n    //       lg: '1rem', // Large devices\r\n    //       xl: '5 rem', // Extra-large devices and above\r\n    //     },\r\n   }}>\r\n      or\r\n    </Typography>\r\n\r\n    {/* <Paper\r\n      variant=\"outlined\"\r\n      sx={{\r\n        backgroundColor: '#F6F7F8',\r\n        border: `1.5px dashed ${dragActive ? 'primary.main' : 'grey.300'}`,\r\n        borderRadius: '10px',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        // p: !singlePage ? 1 : 0,\r\n        p: {\r\n          xs: 1, // Small devices\r\n          md: 1, // Medium devices\r\n          lg:  !singlePage ? 1: 0, // Large devices\r\n          xl: !singlePage? 2:1, // Extra-large devices\r\n        },\r\n        gap: 0.5,\r\n        cursor: 'pointer',\r\n        // mb: 2,\r\n      }}\r\n    >\r\n      <Box sx={{ textAlign: 'center', width: '100%' }}>\r\n        <TextField\r\n          size=\"small\"\r\n          placeholder=\"Paste image URL here\"\r\n          fullWidth\r\n          variant=\"standard\"\r\n          value={imageUrl}\r\n          onChange={(e) => setImageUrl(e.target.value)}\r\n          onBlur={handleUrlPaste}\r\n          onKeyPress={(e) => {\r\n            if (e.key === 'Enter') {\r\n              handleUrlPaste(e);\r\n            }\r\n          }}\r\n          InputProps={{\r\n            disableUnderline: true,\r\n          }}\r\n          sx={{\r\n            paddingLeft: '10px',\r\n            paddingRight:\"10px\",\r\n            '& .MuiInputBase-root': {\r\n              borderBottom: 'none',\r\n            },\r\n          }}\r\n        />\r\n        \r\n      </Box>\r\n    </Paper> */}\r\n    <Paper\r\n  variant=\"outlined\"\r\n  sx={{\r\n    backgroundColor: '#F6F7F8',\r\n    border: `1.5px dashed ${dragActive ? 'primary.main' : 'grey.300'}`,\r\n    borderRadius: '10px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    p: {\r\n      xs: 1,\r\n      md: 1,\r\n      lg: !singlePage ? 1 : 0,\r\n      xl: !singlePage ? 2 : 1,\r\n    },\r\n    gap: 0.5,\r\n    cursor: 'pointer',\r\n  }}\r\n>\r\n  <Box sx={{ \r\n    textAlign: 'center', \r\n    width: '100%',\r\n    px: 1 // Add horizontal padding to the Box\r\n  }}>\r\n    <TextField\r\n      size=\"small\"\r\n      placeholder=\"Paste image URL here\"\r\n      fullWidth\r\n      variant=\"standard\"\r\n      value={imageUrl}\r\n      onChange={(e) => setImageUrl(e.target.value)}\r\n      onBlur={handleUrlPaste}\r\n      onKeyPress={(e) => {\r\n        if (e.key === 'Enter') {\r\n          handleUrlPaste(e);\r\n        }\r\n      }}\r\n      InputProps={{\r\n        disableUnderline: true,\r\n        sx: {\r\n          px: 1, // Add padding to the input itself\r\n          width: '100%',\r\n          '& input': {\r\n            width: '100%',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis'\r\n          }\r\n        }\r\n      }}\r\n      sx={{\r\n        width: '100%',\r\n        '& .MuiInputBase-root': {\r\n          borderBottom: 'none',\r\n          width: '100%'\r\n        },\r\n      }}\r\n    />\r\n  </Box>\r\n</Paper>\r\n\r\n    \r\n      {files?.length > 0 && (\r\n  <>\r\n    <Box sx={{ display: 'flex', margin: 1, p: 0, alignItems: 'center', justifyContent: 'flex-end' }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.2 }}>\r\n        <Typography variant=\"body2\">Preview Thumbnail</Typography>\r\n        <Switch size=\"small\" checked={showThumbnail} onChange={(e) => setShowThumbnail(e.target.checked)} />\r\n      </Box>\r\n    </Box>\r\n    <Box sx={{ \r\n      flexGrow:\"unset\",\r\n      \r\n      overflow: 'hidden', \r\n    // backgroundColor: \"yellow\",\r\n    maxHeight:\"100%\",\r\n     }}>\r\n      <Box sx={{ maxHeight: '100%', overflowY: 'auto', p: 1 }}>\r\n        {showThumbnail ? (\r\n          <Stack spacing={1}>\r\n            {/* Thumbnail view code remains the same */}\r\n            {files?.map((file, index) => (\r\n  <Box\r\n    key={index}\r\n    sx={{\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      p: 1,\r\n      borderRadius: 1,\r\n      bgcolor: '#f5f5f5',\r\n      position: 'relative'\r\n    }}\r\n  >\r\n    {file.type.startsWith('image/') ? (\r\n      <Box\r\n        component=\"img\"\r\n        src={URL.createObjectURL(file)}\r\n        alt={file.name}\r\n        sx={{\r\n          width: 48,\r\n          height: 48,\r\n          borderRadius: 1,\r\n          objectFit: 'cover',\r\n          mr: 2\r\n        }}\r\n      />\r\n    ) : (\r\n      <Box\r\n        sx={{\r\n          width: 48,\r\n          height: 48,\r\n          borderRadius: 1,\r\n          bgcolor: '#00A76F',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          color: 'white',\r\n          mr: 2\r\n        }}\r\n      >\r\n        <ImageIcon />\r\n      </Box>\r\n    )}\r\n    <Box sx={{ flex: 1, minWidth: 0 }}>\r\n      <Typography \r\n        variant=\"body2\" \r\n        sx={{ \r\n          overflow: 'hidden',\r\n          textOverflow: 'ellipsis',\r\n          whiteSpace: 'nowrap'\r\n        }}\r\n      >\r\n        {file.name}\r\n      </Typography>\r\n      <Typography \r\n        variant=\"caption\" \r\n        color=\"text.secondary\"\r\n      >\r\n        {(file.size / (1024 * 1024)).toFixed(2)} MB\r\n      </Typography>\r\n    </Box>\r\n    <Box sx={{ display: 'flex', gap: 1 }}>\r\n      <IconButton\r\n        size=\"small\"\r\n        onClick={() => handleEnlarge(file)}\r\n        sx={{\r\n          color: 'text.secondary',\r\n          '&:hover': {\r\n            color: 'primary.main'\r\n          }\r\n        }}\r\n      >\r\n        <img src={ExpandIcon} alt=\"Expand Logo\" style={{ width: '16px' }} />\r\n      </IconButton>\r\n      <IconButton\r\n        size=\"small\"\r\n        onClick={() => removeFile(index)}\r\n        sx={{\r\n          color: 'text.secondary',\r\n          '&:hover': {\r\n            color: 'error.main'\r\n          }\r\n        }}\r\n      >\r\n        <CloseIcon sx={{ fontSize: 16 }} />\r\n      </IconButton>\r\n    </Box>\r\n  </Box>\r\n))}\r\n          </Stack>\r\n        ) : (\r\n          <Grid container spacing={2}>\r\n            {files?.map((file, index) => (\r\n              <Grid item xs={12} sm={6} md={6} lg={load?6:4}  key={index} sx={{ marginBottom: 2 }}          >\r\n                <Box\r\n                  sx={{\r\n                    position: 'relative',\r\n                    width: '100%',\r\n                    paddingTop: '100%', // This creates a 1:1 aspect ratio\r\n                    borderRadius: 1,\r\n                    overflow: 'hidden',\r\n                  }}\r\n                >\r\n                  {file.type.startsWith('image/') ? (\r\n                    <Box\r\n                      component=\"img\"\r\n                      src={URL.createObjectURL(file)}\r\n                      alt={file.name}\r\n                      sx={{\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: '100%',\r\n                        // maxWidth:\"100%\",\r\n                        height: '100%',\r\n                        objectFit: 'cover',\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    <Box\r\n                      sx={{\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        bgcolor: '#00A76F',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        color: 'white',\r\n                      }}\r\n                    >\r\n                      <ImageIcon sx={{ fontSize: '3rem' }} />\r\n                    </Box>\r\n                  )}\r\n                  <IconButton\r\n                    size=\"small\"\r\n                    onClick={() => removeFile(index)}\r\n                    sx={{\r\n                      position: 'absolute',\r\n                      top: 8,\r\n                      right: 8,\r\n                      color: '#fff',\r\n                      bgcolor: 'rgba(0, 0, 0, 0.5)',\r\n                      '&:hover': {\r\n                        bgcolor: 'rgba(0, 0, 0, 0.7)',\r\n                      },\r\n                      padding: '4px',\r\n                    }}\r\n                  >\r\n                    <CloseIcon sx={{ fontSize: 16 }} />\r\n                  </IconButton>\r\n                  <IconButton\r\n                    size=\"small\"\r\n                    onClick={() => handleEnlarge(file)}\r\n                    sx={{\r\n                      position: 'absolute',\r\n                      bottom: 8,\r\n                      right: 8,\r\n                      color: '#fff',\r\n                      bgcolor: 'rgba(0, 0, 0, 0.5)',\r\n                      '&:hover': {\r\n                        bgcolor: 'rgba(0, 0, 0, 0.7)',\r\n                      },\r\n                      padding: '4px',\r\n                    }}\r\n                  >\r\n                    <img src={ExpandIcon} alt=\"Expand Logo\" style={{ width: '20px' }} />\r\n                  </IconButton>\r\n                </Box>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n    \r\n    {/* <Box sx={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'flex-end', mt: 2 }}>\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"error\"\r\n        size=\"small\"\r\n        sx={{\r\n          color: '#637381',\r\n          borderColor: '#637381',\r\n          '&:hover': {\r\n            borderColor: '#212B36',\r\n            color: '#212B36',\r\n          },\r\n        }}\r\n        onClick={removeAll}\r\n      >\r\n        Clear All\r\n      </Button>\r\n    </Box> */}\r\n     <Box \r\n            sx={{\r\n              flexShrink: 0,\r\n              padding: \"10px\",\r\n              backgroundColor: 'inherit',\r\n              textAlign: 'center',\r\n              paddingBottom:2\r\n            }}\r\n          >\r\n           <Button \r\n              onClick={handleFullScreen} \r\n              variant=\"contained\" \r\n              color=\"primary\" \r\n         \r\n              disabled={buttonDisable || holdButton}\r\n              startIcon={\r\n                <Box\r\n                  component=\"img\"\r\n                  src={Generate}\r\n                  alt=\"Company Logo\"\r\n                  sx={{\r\n                    width: \"24px\",\r\n                    height: \"24px\",\r\n                  }}\r\n                />\r\n              }\r\n              sx={{\r\n                borderRadius: \"50px\",\r\n                transition: \"opacity 0.3s ease, transform 0.3s ease\",\r\n                opacity: buttonDisable || holdButton ? 0.5 : 1,\r\n                transform: buttonDisable || holdButton ? \"scale(0.95)\" : \"scale(1)\",\r\n                // fontSize: {\r\n                //   md: '0.6rem',     // default for small screens\r\n                //   lg: '1rem',  // larger font for large screens\r\n                //   xl: '1.5rem'    // extra-large font for extra-large screens\r\n                // }\r\n            \r\n            \r\n              }}\r\n            >\r\n              Generate\r\n            </Button>\r\n          </Box>\r\n  </>\r\n)}\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" onClose={() => setError('')}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {!!enlargedImage && (\r\n        <Dialog\r\n          open={true}\r\n          onClose={handleCloseEnlarged}\r\n          maxWidth={false}\r\n          fullWidth\r\n          PaperProps={{\r\n            style: {\r\n              backgroundColor: 'transparent',\r\n              boxShadow: 'none',\r\n              margin: 0,\r\n              width: '30%',\r\n              maxWidth: '30%',\r\n              \r\n            },\r\n          }}\r\n          BackdropProps={{\r\n            style: {\r\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n            },\r\n          }}\r\n        >\r\n          <DialogContent\r\n            className=\"p-0 flex justify-center items-center\"\r\n            style={{\r\n              padding: 0,\r\n              height: '100vh',\r\n              width: '100%',\r\n              maxWidth: '100%',\r\n              maxHeight: '40vh',\r\n              margin: 0,\r\n            }}\r\n          >\r\n            <img\r\n              src={enlargedImage}\r\n              alt=\"Enlarged view\"\r\n              className=\"w-full h-full object-contain\"\r\n              style={{\r\n                width: '90%',\r\n                height: '90%',\r\n              }}\r\n            />\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MultiFileUpload;\r\n\r\n\r\n","\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { Button, Typography, Box, Autocomplete, TextField } from '@mui/material';\r\nimport View from \"./View\";\r\nimport MultiFileUpload from './MultiFileUpload';\r\nimport AutoAwesomeIcon from '@mui/icons-material/AutoAwesome';\r\nimport Logo from './../assets/images/logo.png';\r\nimport Generate from './../assets/images/generate.png'\r\nimport BackImage from './../assets/images/upload-png.png';\r\nimport { io } from \"socket.io-client\";\r\nimport axios from 'axios';\r\nimport jsPDF from \"jspdf\";\r\nimport { marked } from \"marked\";\r\nimport html2canvas from \"html2canvas\";\r\nimport { PDFDocument } from \"pdf-lib\"; // To merge PDF files\r\n\r\nconst Home = () => {\r\n  const [loader,setLoader]=useState(false)\r\n  const list = [\r\n    { name: \"Claude-3.5-Sonnet\", Id: \"claude\" },\r\n    { name: \"GPT-4o\", Id: \"openai\" },\r\n    { name: \"Gemini-1.5-flash\", Id: \"gemini\" },\r\n    \r\n    // { name: \"GPT 3\", Id: \"3\" }\r\n  ];\r\n  const [count, setCount]=useState(1)\r\n\r\n  const [fullScreen, setFullScreen] = useState(false);\r\n  const [selectedModel, setSelectedModel] = useState(list[0]);\r\n  const [filesData, setFilesData] = useState([]);\r\n  const [socketTrue, setSocketTrue] = useState(false);\r\n  const [streamData, setStreamData] = useState(null);\r\n  const socketRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const wsRef = useRef(null);\r\n  const isConnectedRef = useRef(false);\r\nconsole.log(streamData,fullScreen,\"suruuu\")\r\n  \r\n\r\n  \r\nconst [firstUpload, setFirstUpload]=useState(false)\r\n  const handleFullScreen = async () => {\r\n    setFullScreen(true);\r\n    setSocketTrue(true);\r\n    setCount(fullScreen?count+1:0)\r\n\r\n    \r\n    try {\r\n         // Then initialize socket connection\r\n        //  await initializeSocket();\r\n      // First make the initial API call\r\n      await handleApiCall(filesData);\r\n      \r\n      // Then initialize socket connection\r\n    //    initializeSocket();\r\n    } catch (error) {\r\n      console.error(\"Error in handleFullScreen:\", error);\r\n    }\r\n  };\r\nconst [buttonDisable,setButtonDisable]=useState(true)\r\nconsole.log(\"llllllll\",buttonDisable,filesData)\r\n  const handleImageData = (data) => {\r\n  \r\n    \r\n\r\n    if(data && data?.length > 0){\r\n      setButtonDisable(false)\r\n      console.log(\"lllllllllllkkk\",buttonDisable,data?.length)\r\n      if (!fullScreen){\r\n        setFirstUpload(true)\r\n      }\r\n      console.log(fullScreen,firstUpload,\"fullScreen\")\r\n    }\r\n    \r\n    console.log(\"lllllllllll\",buttonDisable,data?.length)\r\n    setFilesData(data);\r\n  };\r\nconst handleClearData=(data)=>{\r\n  console.log(data,\"llllmmmmm\")\r\n  setFilesData([]);\r\n  setButtonDisable(true)\r\n}\r\nconst[holdButton,setHoldButton]=useState(false)\r\nconsole.log(holdButton,buttonDisable,\"buttonDisable\")\r\nconst handleHoldButton=()=>{\r\n  setHoldButton(false)\r\n\r\n}\r\n  const handleApiCall = async (Data) => {\r\n    try {\r\n      console.log(selectedModel,\"selectedModel\")\r\n      const formData = new FormData();\r\n      \r\n      if (Data && Array.isArray(Data)) {\r\n        Data.forEach((file) => {\r\n          formData.append('images', file);\r\n        });\r\n      }\r\n      \r\n      formData.append('model', selectedModel?.Id);\r\n      setLoader(true)\r\n      setHoldButton(true)\r\n      const response = await axios.post(\r\n        // 'http://192.168.1.81:8000/api/v1/analyze/stream',\r\n        // 'http://localhost:8000/api/v1/analyze/stream',\r\n        `https://waytool.thankfulriver-bb957f46.koreacentral.azurecontainerapps.io/api/v1/analyze/stream`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n        }\r\n      );\r\n\r\n      setStreamData(response.data);\r\n      setLoader(true)\r\n    } catch (error) {\r\n      console.error('API request failed:', error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\nasync function convertSvgToPng(dataUrl) {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    img.src = dataUrl;\r\n    img.onload = () => {\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(img, 0, 0);\r\n      resolve(canvas.toDataURL(\"image/png\"));\r\n    };\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n// versionv3\r\n// Helper function to render markdown as an image with larger text\r\nconst renderMarkdownToImage = async (markdownText) => {\r\n  // Convert markdown to HTML\r\n  const htmlContent = marked(markdownText);\r\n\r\n  // Create a hidden div to render the HTML content\r\n  const container = document.createElement(\"div\");\r\n  container.innerHTML = htmlContent;\r\n\r\n  // Apply some styling to the container to increase font size\r\n  container.style.position = \"absolute\";\r\n  container.style.left = \"-9999px\"; // Hide it offscreen\r\n  container.style.fontSize = \"18px\"; // Increase text size\r\n  container.style.lineHeight = \"1.6\"; // Adjust line height for readability\r\n  container.style.fontFamily = \"Arial, sans-serif\"; // Use a common font\r\n  container.style.width = \"100%\"; // Allow it to stretch to fit the content\r\n\r\n  // Append to the body temporarily to render\r\n  document.body.appendChild(container);\r\n\r\n  // Render the container as an image\r\n  const canvas = await html2canvas(container);\r\n  document.body.removeChild(container); // Clean up after rendering\r\n  return canvas.toDataURL(\"image/png\");\r\n};\r\n\r\n// Function to read file as data URL\r\nasync function readFileAsDataUrl(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = reject;\r\n    reader.readAsDataURL(file);\r\n  });\r\n}\r\n\r\nconst downloadPDF = async () => {\r\n  try {\r\n    const pdf = new jsPDF();\r\n    const pageHeight = pdf.internal.pageSize.height;\r\n    const pageWidth = pdf.internal.pageSize.width;\r\n    const margin = 10; // Margin around the content\r\n    let yOffset = margin;\r\n\r\n    // 1. Add images to the PDF\r\n    for (let i = 0; i < filesData.length; i++) {\r\n      const file = filesData[i];\r\n      const fileType = file.type;\r\n\r\n      if (fileType.startsWith(\"image/\")) {\r\n        let dataUrl;\r\n        \r\n        if (fileType === \"image/svg+xml\") {\r\n          dataUrl = await convertSvgToPng(await readFileAsDataUrl(file));\r\n        } else {\r\n          dataUrl = await readFileAsDataUrl(file);\r\n        }\r\n\r\n        const img = new Image();\r\n        await new Promise((resolve, reject) => {\r\n          img.onload = resolve;\r\n          img.onerror = reject;\r\n          img.src = dataUrl;\r\n        });\r\n\r\n        // Calculate dimensions without enlarging images\r\n        const imgAspectRatio = img.width / img.height;\r\n        const maxImgWidth = pageWidth - 2 * margin;\r\n        const imgWidth = Math.min(img.width, maxImgWidth);\r\n        const imgHeight = imgWidth / imgAspectRatio;\r\n\r\n        if (yOffset + imgHeight > pageHeight - margin) {\r\n          pdf.addPage();\r\n          yOffset = margin;\r\n        }\r\n\r\n        pdf.addImage(dataUrl, \"JPEG\", margin, yOffset, imgWidth, imgHeight);\r\n        yOffset += imgHeight + margin;\r\n      } else if (fileType === \"application/pdf\") {\r\n        const existingPdfBytes = await file.arrayBuffer();\r\n        const existingPdf = await PDFDocument.load(existingPdfBytes);\r\n        const copiedPages = await pdf.copyPages(existingPdf, existingPdf.getPageIndices());\r\n\r\n        copiedPages.forEach((page) => {\r\n          pdf.addPage(page);\r\n        });\r\n      }\r\n    }\r\n\r\n    // 2. Render markdown content as image and add it to PDF\r\n    if (streamData) {\r\n      const markdownImage = await renderMarkdownToImage(streamData);\r\n\r\n      // Add a new page if necessary for the markdown content\r\n      if (yOffset + pageHeight > pageHeight - margin) {\r\n        pdf.addPage();\r\n        yOffset = margin;\r\n      }\r\n\r\n      // Add markdown image to the PDF\r\n      pdf.addImage(markdownImage, \"PNG\", margin, yOffset, pageWidth - 2 * margin, 0);\r\n    }\r\n\r\n    // Save the PDF\r\n    pdf.save(`Visual_assessment_report_with_${selectedModel?.name}.pdf`);\r\n  } catch (error) {\r\n    console.error(\"Error generating PDF:\", error);\r\n    alert(\"Error generating PDF. Please check your files and try again.\");\r\n  }\r\n};\r\n\r\n  // Rest of your component JSX remains the same...\r\n  return (\r\n    <Box sx={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>\r\n      {/* Fixed Header */}\r\n      <Box \r\n        sx={{ \r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          height: '60px',\r\n          zIndex: 1000,\r\n          backgroundColor: 'white',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          padding: '0 20px'\r\n        }}\r\n      >\r\n        <img\r\n          src={Logo}\r\n          alt=\"Company Logo\"\r\n          style={{\r\n            width: \"150px\",\r\n          }}\r\n        />\r\n      </Box>\r\n\r\n      {/* Main Content Area */}\r\n      <Box\r\n        sx={{\r\n          flexGrow: 1,\r\n          marginTop: '60px',\r\n          backgroundImage: `url(${BackImage})`,\r\n          backgroundSize: 'cover',\r\n          backgroundPosition: 'center',\r\n          backgroundRepeat: 'no-repeat',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          height: 'calc(100vh - 60px)',\r\n          overflow: 'hidden'\r\n        }}\r\n      >\r\n        {/* Left Panel */}\r\n        <Box\r\n          sx={{\r\n            padding:fullScreen? 1 :1,\r\n            // mt: fullScreen ? 4 : 0,\r\n            width: fullScreen ? \"30%\" : \"40%\",\r\n            height: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column'\r\n          }}\r\n        >\r\n          {/* Fixed Content Area */}\r\n          <Box sx={{ flexShrink: 0 }}>\r\n            <Typography \r\n              variant=\"h6\" \r\n              sx={{\r\n                fontWeight: 535,\r\n                fontFamily: 'Roboto, sans-serif',\r\n                fontSize: fullScreen ? \"25px\" : \"30px\",\r\n                // fontSize: {\r\n                //       // medium screen size\r\n                //   xl: \"35px\",      // extra-large screen size\r\n                // },\r\n                // marginBottom: 1\r\n              }}\r\n            >\r\n              Way.com Visual Assessment Tool\r\n            </Typography>\r\n            \r\n            <Autocomplete\r\n              size=\"small\"\r\n              disableClearable\r\n              options={list}\r\n              getOptionLabel={(option) => option.name}\r\n              value={selectedModel}\r\n              onChange={(event, newValue) => {\r\n                setSelectedModel(newValue);\r\n              }}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    ...params.InputProps,\r\n                    sx: {\r\n                      borderRadius: '30px',\r\n                      width: fullScreen ? \"53%\" : \"40%\",\r\n                      marginTop: 2,\r\n                      marginBottom: 0.8,\r\n                      backgroundColor: \"black\",\r\n                      color: \"white\",\r\n                      '& .MuiSvgIcon-root': {\r\n                        color: 'white',\r\n                      }\r\n                    },\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Box>\r\n\r\n          {/* Scrollable Upload Area */}\r\n          <Box \r\n            sx={{\r\n              marginTop: !firstUpload ? 3 : 1,\r\n              flexGrow: 1,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              overflow: 'hidden',\r\n              // backgroundColor: \"green\",\r\n              height: 0,\r\n            }}\r\n          >\r\n            <MultiFileUpload \r\n              handleData={handleImageData} \r\n              load={fullScreen}  \r\n              singlePage={firstUpload}\r\n              handleClear={handleClearData}\r\n              holdButton={holdButton}\r\n              handleFullScreen={handleFullScreen}\r\n              buttonDisable={buttonDisable}\r\n              \r\n\r\n\r\n            />\r\n          </Box>\r\n\r\n          {/* Fixed Button Area */}\r\n          {/* <Box \r\n            sx={{\r\n              flexShrink: 0,\r\n              padding: \"10px\",\r\n              backgroundColor: 'inherit',\r\n              textAlign: 'center'\r\n            }}\r\n          >\r\n           <Button \r\n              onClick={handleFullScreen} \r\n              variant=\"contained\" \r\n              color=\"primary\" \r\n              disabled={buttonDisable || holdButton}\r\n              startIcon={\r\n                <Box\r\n                  component=\"img\"\r\n                  src={Generate}\r\n                  alt=\"Company Logo\"\r\n                  sx={{\r\n                    width: \"24px\",\r\n                    height: \"24px\",\r\n                  }}\r\n                />\r\n              }\r\n              sx={{\r\n                borderRadius: \"50px\",\r\n                transition: \"opacity 0.3s ease, transform 0.3s ease\",\r\n                opacity: buttonDisable || holdButton ? 0.5 : 1,\r\n                transform: buttonDisable || holdButton ? \"scale(0.95)\" : \"scale(1)\"\r\n              }}\r\n            >\r\n              Generate\r\n            </Button>\r\n          </Box> */}\r\n        </Box>\r\n\r\n        {/* Right Panel */}\r\n        {fullScreen && (\r\n          <Box\r\n            sx={{\r\n              padding: 0.7,\r\n              pb:3,\r\n              width: \"65%\",\r\n              height: '100%',\r\n              overflowY: 'auto'\r\n            }}\r\n          >\r\n            <View \r\n              data={streamData}  \r\n              load={loader} \r\n              refresh={count} \r\n              hold={handleHoldButton}\r\n              download={downloadPDF}\r\n            />\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n"],"names":["_ref","data","load","refresh","hold","download","loader","setLoader","useState","displayText","setDisplayText","isTyping","setIsTyping","bottomRef","useRef","useEffect","currentIndex","streamText","length","prev","delay","char","includes","setTimeout","current","scrollIntoView","behavior","_jsx","Box","sx","position","top","right","bottom","width","display","flexDirection","children","_jsxs","Card","height","margin","borderRadius","flex","overflowY","minHeight","paddingBottom","background","CardContent","Stack","spacing","pt","Skeleton","animation","_Fragment","ReactMarkdown","remarkPlugins","remarkGfm","className","ref","left","borderTop","p","backgroundColor","boxShadow","borderBottomLeftRadius","borderBottomRightRadius","gap","Button","variant","onClick","FileDownloadIcon","marginRight","handleData","handleClear","singlePage","buttonDisable","handleFullScreen","holdButton","files","setFiles","showThumbnail","setShowThumbnail","dragActive","setDragActive","error","setError","imageUrl","setImageUrl","enlargedImage","setEnlargedImage","console","log","handleUrlPaste","async","_e$target","_e$target2","e","target","value","url","trim","file","response","fetch","blob","fileName","substring","lastIndexOf","File","type","Error","createFileFromUrl","isDuplicateFile","name","prevFiles","newFile","some","existingFile","size","processFiles","newFiles","duplicates","validFiles","Array","from","forEach","push","join","handleDrag","preventDefault","stopPropagation","removeFile","indexToRemove","updatedFiles","filter","_","index","handleEnlarge","URL","createObjectURL","overflow","Paper","xs","md","lg","xl","border","alignItems","cursor","onDragEnter","onDragLeave","onDragOver","onDrop","dataTransfer","bgcolor","justifyContent","CloudUploadIcon","fontSize","color","textAlign","mb","Typography","style","textDecoration","hidden","multiple","onChange","padding","alignSelf","px","TextField","placeholder","fullWidth","onBlur","onKeyPress","key","InputProps","disableUnderline","textOverflow","borderBottom","Switch","checked","flexGrow","maxHeight","map","startsWith","component","src","alt","objectFit","mr","ImageIcon","minWidth","whiteSpace","toFixed","IconButton","ExpandIcon","CloseIcon","Grid","container","item","sm","marginBottom","paddingTop","flexShrink","disabled","startIcon","transition","opacity","transform","Alert","severity","onClose","Dialog","open","handleCloseEnlarged","maxWidth","PaperProps","BackdropProps","DialogContent","Home","list","Id","count","setCount","fullScreen","setFullScreen","selectedModel","setSelectedModel","filesData","setFilesData","socketTrue","setSocketTrue","streamData","setStreamData","firstUpload","setFirstUpload","setButtonDisable","setHoldButton","handleApiCall","formData","FormData","Data","isArray","append","axios","post","headers","message","convertSvgToPng","dataUrl","Promise","resolve","reject","img","Image","onload","canvas","document","createElement","getContext","drawImage","toDataURL","onerror","readFileAsDataUrl","reader","FileReader","result","readAsDataURL","zIndex","Logo","marginTop","backgroundImage","BackImage","backgroundSize","backgroundPosition","backgroundRepeat","fontWeight","fontFamily","Autocomplete","disableClearable","options","getOptionLabel","option","event","newValue","renderInput","params","MultiFileUpload","pb","View","handleHoldButton","pdf","jsPDF","pageHeight","internal","pageSize","pageWidth","yOffset","i","fileType","imgAspectRatio","maxImgWidth","imgWidth","Math","min","imgHeight","addPage","addImage","existingPdfBytes","arrayBuffer","existingPdf","PDFDocument","copyPages","getPageIndices","page","markdownImage","htmlContent","marked","markdownText","innerHTML","lineHeight","body","appendChild","html2canvas","removeChild","renderMarkdownToImage","save","alert"],"sourceRoot":""}