{"version":3,"file":"static/js/833.795136ea.chunk.js","mappings":"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","sources":["Pages/View.jsx","Pages/MultiFileUpload.jsx","Pages/Home.jsx"],"sourcesContent":["\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\nimport { Box, Button, Card, CardContent, LinearProgress, Stack } from '@mui/material';\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport DownloadIcon from '@mui/icons-material/Download';\r\nimport { Tooltip } from '@mui/material';\r\n\r\nconst View = ({ data, load, refresh, hold, download }) => {\r\n  const [loader, setLoader] = useState(true);\r\n  const [displayText, setDisplayText] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const containerRef = useRef(null);\r\n  const bottomRef = useRef(null);\r\n  useEffect(() => {\r\n    console.log(data, \"malli\", load, refresh)\r\n\r\n\r\n  }, [load, data])\r\n  useEffect(() => {\r\n    console.log(refresh, \"refresh\")\r\n    if (refresh !== 0) {\r\n      setLoader(true)\r\n      setDisplayText(null)\r\n\r\n    }\r\n\r\n  }, [refresh])\r\n\r\n\r\n  useEffect(() => {\r\n    if (!data) return;\r\n\r\n    setIsTyping(true);\r\n    setDisplayText('');\r\n    setLoader(false);\r\n    let currentIndex = 0;\r\n\r\n    const streamText = () => {\r\n      if (currentIndex < data.length) {\r\n        setDisplayText((prev) => prev + data[currentIndex]);\r\n        setProgress((currentIndex / data.length) * 100);\r\n        currentIndex++;\r\n\r\n        let delay = 10;\r\n        const char = data[currentIndex - 1];\r\n        if (['.', '!', '?', ':'].includes(char)) delay = 300;\r\n        else if ([',', ';'].includes(char)) delay = 150;\r\n        else if (char === '\\n') delay = 200;\r\n\r\n        setTimeout(streamText, delay);\r\n\r\n      } else {\r\n        setIsTyping(false);\r\n        setLoader(false);\r\n        hold(); // Call hold() after completion of streamText\r\n      }\r\n    };\r\n\r\n    streamText();\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    if (bottomRef.current) {\r\n      bottomRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [displayText]);\r\n  const reportDownload = (e) => {\r\n    download()\r\n\r\n  }\r\n\r\n  return (\r\n    loader ? (\r\n      <Stack sx={{ width: 600, mx: 'auto', mt: 4 }}>\r\n        <Skeleton width={300} height={20} color={\"grey\"} />\r\n        <Skeleton width={350} height={20} animation=\"wave\" />\r\n        <Skeleton width={400} height={20} animation={false} />\r\n        <Skeleton width={300} height={20} animation=\"wave\" />\r\n        <Skeleton width={400} height={20} animation={false} />\r\n      </Stack>\r\n    ) : (\r\n      <div className=\"flex flex-col items-center p-4 pb-6 max-w-4xl mx-auto\">\r\n        <div\r\n          ref={containerRef}\r\n          className=\"bg-white rounded-lg shadow-md border border-gray-200 p-6 min-h-[400px] max-h-[80vh] overflow-y-auto w-full\"\r\n          style={{ textAlign: 'left', fontFamily: 'Arial, sans-serif', }}\r\n        >\r\n          {/* <Card sx={{margin:\"20px\",\r\n            borderRadius:\"20px\",\r\n          }}>\r\n                <Box  sx={{ textAlign: \"right\" }}>\r\n      <Button sx={{ textAlign: \"right\" }} variant=\"outlined\" onClick={(e) => { reportDownload(e) }}>Report Download</Button>\r\n    </Box>\r\n             <CardContent>\r\n         \r\n           \r\n\r\n          <ReactMarkdown\r\n            children={displayText}\r\n            remarkPlugins={[remarkGfm]}\r\n            components={{\r\n              h1: ({ node, ...props }) => <h1 className=\"text-2xl font-bold mt-6 mb-4\" {...props} />,\r\n              h2: ({ node, ...props }) => <h2 className=\"text-xl font-bold mt-5 mb-3\" {...props} />,\r\n              p: ({ node, ...props }) => <p className=\"my-2 text-gray-800 leading-relaxed\" {...props} />,\r\n              ul: ({ node, ...props }) => <ul className=\"list-disc list-inside ml-4 my-2\" {...props} />,\r\n              li: ({ node, ...props }) => <li className=\"my-1 text-gray-800\" {...props} />,\r\n              pre: ({ node, ...props }) => (\r\n                <pre className=\"bg-gray-100 p-3 rounded-md overflow-auto my-2\" {...props} />\r\n              ),\r\n              code: ({ node, ...props }) => (\r\n                <code className=\"bg-gray-200 rounded px-1 py-0.5 text-sm font-mono text-gray-800\" {...props} />\r\n              ),\r\n              blockquote: ({ node, ...props }) => (\r\n                <blockquote className=\"border-l-4 border-blue-500 pl-4 text-gray-600 italic my-4\" {...props} />\r\n              ),\r\n            }}\r\n          />\r\n          </CardContent>\r\n          </Card> */}\r\n\r\n          {/* <Card sx={{ \r\n      margin: \"20px\", \r\n      borderRadius: \"20px\",\r\n      position: \"relative\"  // Keep the card relative\r\n    }}>\r\n      <Box sx={{ \r\n        position: \"fixed\",  // Changed to fixed to float above everything\r\n        top: \"80px\",       // Distance from top\r\n        right: \"80px\",     // Distance from right\r\n        textAlign: \"right\",\r\n        zIndex: 7690,      // Very high z-index to ensure it stays on top\r\n      }}>\r\n        <Button \r\n          sx={{ \r\n            textAlign: \"right\",\r\n            backgroundColor: \"white\",  // Added white background\r\n            boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\" // Added subtle shadow\r\n          }} \r\n          variant=\"outlined\" \r\n          onClick={(e) => { reportDownload(e) }}\r\n        >\r\n          Report \r\n        </Button>\r\n      </Box>\r\n      <CardContent sx={{marginTop:\"10px\"}}>\r\n        <ReactMarkdown\r\n          children={displayText}\r\n          remarkPlugins={[remarkGfm]}\r\n          components={{\r\n            h1: ({ node, ...props }) => <h1 className=\"text-2xl font-bold mt-6 mb-4\" {...props} />,\r\n            h2: ({ node, ...props }) => <h2 className=\"text-xl font-bold mt-5 mb-3\" {...props} />,\r\n            p: ({ node, ...props }) => <p className=\"my-2 text-gray-800 leading-relaxed\" {...props} />,\r\n            ul: ({ node, ...props }) => <ul className=\"list-disc list-inside ml-4 my-2\" {...props} />,\r\n            li: ({ node, ...props }) => <li className=\"my-1 text-gray-800\" {...props} />,\r\n            pre: ({ node, ...props }) => (\r\n              <pre className=\"bg-gray-100 p-3 rounded-md overflow-auto my-2\" {...props} />\r\n            ),\r\n            code: ({ node, ...props }) => (\r\n              <code className=\"bg-gray-200 rounded px-1 py-0.5 text-sm font-mono text-gray-800\" {...props} />\r\n            ),\r\n            blockquote: ({ node, ...props }) => (\r\n              <blockquote className=\"border-l-4 border-blue-500 pl-4 text-gray-600 italic my-4\" {...props} />\r\n            ),\r\n          }}\r\n        />\r\n      </CardContent>\r\n    </Card> */}\r\n\r\n          <Card sx={{\r\n            margin: \"20px\",\r\n            marginTop:\"40px\",\r\n            borderRadius: \"20px\",\r\n            position: \"relative\",\r\n            // paddingTop: \"40px\"  // Add padding to accommodate the Button\r\n          }}>\r\n           \r\n\r\n            <CardContent>\r\n            \r\n                          <ReactMarkdown\r\n                children={displayText}\r\n                remarkPlugins={[remarkGfm]}\r\n                components={{\r\n                  // ... (rest of your components remain the same)\r\n                }}\r\n              />\r\n            </CardContent>\r\n{!isTyping && <CardContent>\r\n           <Button\r\n      sx={{\r\n        textAlign: \"right\",\r\n        // backgroundColor: \"white\",\r\n        boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\"\r\n      }}\r\n      variant=\"contained\"\r\n      onClick={(e) => { reportDownload(e) }}\r\n    >\r\n    Download Report\r\n       {/* <DownloadIcon/> */}\r\n    </Button> \r\n    </CardContent>}\r\n          </Card>\r\n\r\n\r\n\r\n          {isTyping && (\r\n            <span className=\"inline-block w-2 h-4 ml-1 bg-blue-500 animate-pulse\" />\r\n          )}\r\n          <div ref={bottomRef} />\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default View;\r\n","\r\nimport React, { useEffect, useState } from 'react';\r\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\r\nimport ImageIcon from '@mui/icons-material/Image';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport ZoomInIcon from '@mui/icons-material/ZoomIn';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\nimport ExpandIcon from './../assets/images/expand.png'\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\nimport { Tooltip } from '@mui/material';\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  Typography, \r\n  Box, \r\n  Button, \r\n  Switch,\r\n  IconButton,\r\n  Grid,\r\n  Stack,\r\n  Paper,\r\n  Alert,\r\n  TextField,\r\n  Dialog,\r\n  DialogContent\r\n} from '@mui/material';\r\n\r\nconst MultiFileUpload = ({handleData,load,handleClear, singlePage}) => {\r\n  const [files, setFiles] = useState([]);\r\n  const [showThumbnail, setShowThumbnail] = useState(false);\r\n  const [dragActive, setDragActive] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [imageUrl, setImageUrl] = useState('');\r\n  const [enlargedImage, setEnlargedImage] = useState(null);\r\nconsole.log(singlePage,\"sizesizev\")\r\n  useEffect(() => {\r\n    handleData(files)\r\n  }, [files, handleData])\r\n\r\n  const isValidImageUrl = (url) => {\r\n    return url.match(/\\.(jpeg|jpg|png)$/i);\r\n  };\r\n\r\n  const createFileFromUrl = async (url) => {\r\n    try {\r\n      const response = await fetch(url);\r\n      const blob = await response.blob();\r\n      const fileName = url.substring(url.lastIndexOf('/') + 1);\r\n      return new File([blob], fileName, { type: blob.type });\r\n    } catch (error) {\r\n      throw new Error('Invalid image URL');\r\n    }\r\n  };\r\n\r\n  const handleUrlPaste = async (e) => {\r\n    const url = e.target.value.trim();\r\n    setImageUrl(url);\r\n\r\n    if (!url) return;\r\n\r\n    if (!isValidImageUrl(url)) {\r\n      setError('Invalid image URL. Only JPG, JPEG, and PNG formats are supported.');\r\n      setTimeout(() => setError(''), 3000);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const file = await createFileFromUrl(url);\r\n      if (isDuplicateFile(file)) {\r\n        setError(`Duplicate file: ${file.name}`);\r\n        setTimeout(() => setError(''), 3000);\r\n      } else {\r\n        setFiles(prevFiles => [...prevFiles, file]);\r\n        setImageUrl('');\r\n      }\r\n    } catch (error) {\r\n      setError('Unable to load image from URL. Please check the URL and try again.');\r\n      setTimeout(() => setError(''), 3000);\r\n    }\r\n  };\r\n\r\n  const isDuplicateFile = (newFile) => {\r\n    return files.some(existingFile => \r\n      existingFile.name === newFile.name && \r\n      existingFile.size === newFile.size\r\n    );\r\n  };\r\n\r\n  const processFiles = (newFiles) => {\r\n    const duplicates = [];\r\n    const validFiles = [];\r\n\r\n    Array.from(newFiles).forEach(file => {\r\n      if (isDuplicateFile(file)) {\r\n        duplicates.push(file.name);\r\n      } else {\r\n        validFiles.push(file);\r\n      }\r\n    });\r\n\r\n    if (duplicates.length > 0) {\r\n      setError(`Duplicate file(s) detected: ${duplicates.join(', ')}`);\r\n      setTimeout(() => setError(''), 3000);\r\n    }\r\n\r\n    if (validFiles.length > 0) {\r\n      setFiles(prevFiles => [...prevFiles, ...validFiles]);\r\n    }\r\n  };\r\n\r\n  const handleDrag = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\r\n      setDragActive(true);\r\n    } else if (e.type === \"dragleave\") {\r\n      setDragActive(false);\r\n    }\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDragActive(false);\r\n    processFiles(e.dataTransfer.files);\r\n  };\r\n\r\n  const handleFileSelect = (e) => {\r\n    processFiles(e.target.files);\r\n    e.target.value = null; // clear the input value to allow re-selection of the same file\r\n  };\r\n\r\n  // const removeFile = (indexToRemove) => {\r\n  //   setFiles(prevFiles => prevFiles.filter((_, index) => index !== indexToRemove));\r\n  // };\r\n  const removeFile = (indexToRemove) => {\r\n    setFiles(prevFiles => {\r\n      const updatedFiles = prevFiles.filter((_, index) => index !== indexToRemove);\r\n\r\n        // Check if all files are removed\r\n        if (updatedFiles?.length === 0) {\r\n          handleClear(); // Trigger clear/refresh\r\n      }\r\n      return [...updatedFiles];  // return a new array to force re-render\r\n    });\r\n    \r\n    // Small delay to allow re-render and reset state\r\n    setTimeout(() => setFiles(files => [...files]), 0);\r\n  };\r\n  \r\n  const removeAll = () => {\r\n    handleClear([])\r\n    setFiles([]);\r\n  };\r\n//   useEffect(() => {\r\n//   if ((Array.isArray(files) && files.length === 0) || files === null) {\r\n//     handleClear([]);\r\n//   }\r\n// }, [files]);\r\n\r\n\r\n  const handleEnlarge = (file) => {\r\n    setEnlargedImage(URL.createObjectURL(file));\r\n  };\r\n\r\n  const handleCloseEnlarged = () => {\r\n    setEnlargedImage(null);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ maxWidth: '68rem', mx: 'auto', p: 0 }}>\r\n      <CardContent sx={{ pt: 0, p: 0 }}>\r\n        <Stack spacing={0.8}>\r\n          {error && (\r\n            <Alert severity=\"error\" onClose={() => setError('')}>\r\n              {error}\r\n            </Alert>\r\n          )}\r\n\r\n          <Paper\r\n            variant=\"outlined\"\r\n            sx={{\r\n              // p: load?0:2,\r\n              p: !singlePage?4:0,\r\n              backgroundColor: \"#F6F7F8\",\r\n              border: '1.5px dashed',\r\n              borderColor: dragActive ? 'primary.main' : 'grey.300',\r\n              cursor: 'pointer',\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              borderRadius:\"20px\",\r\n              gap: 0.5,\r\n            \r\n            }}\r\n            onDragEnter={handleDrag}\r\n            onDragLeave={handleDrag}\r\n            onDragOver={handleDrag}\r\n            onDrop={handleDrop}\r\n          >\r\n            <Box sx={{ \r\n              p:0, \r\n              bgcolor: 'primary.50', \r\n              borderRadius: '50%',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center'\r\n            }}>\r\n              <CloudUploadIcon sx={{ fontSize: 32, color: 'primary.main' }} />\r\n            </Box>\r\n            <Box sx={{ textAlign: 'center', mb:!singlePage?1:1 }}>\r\n              <Typography variant={singlePage ? \"body1\" : \"h6\"} >\r\n                Drop or select file <label style={{ \r\n                  cursor: 'pointer',\r\n                  color:\"blue\",\r\n                  textDecoration: 'underline'\r\n                }}>\r\n                  Browse\r\n                  <input\r\n                    type=\"file\"\r\n                    hidden\r\n                    multiple\r\n                    onChange={handleFileSelect}\r\n                  />\r\n                </label>\r\n              </Typography>\r\n              <Typography  variant={singlePage ? \"body2\" : \"body\"}color=\"text.secondary\">\r\n                Limit 200 MB per file.\r\n                \r\n                {' '}Supported Formats: JPG, JPEG, PNG.\r\n              </Typography>\r\n            </Box>\r\n          </Paper>\r\n          \r\n          <Typography variant=\"h6\" sx={{padding:\"0px\", margin:0, marginTop:0,alignSelf:\"center\"}}>\r\n            or\r\n          </Typography>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            sx={{\r\n              backgroundColor: \"#F6F7F8\",\r\n              border: '1.5px dashed',\r\n              borderColor: dragActive ? 'primary.main' : 'grey.300',\r\n              cursor: 'pointer',\r\n              display: 'flex',\r\n              borderRadius:\"10px\",\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              p: !singlePage?1:0,\r\n              gap: 0.5\r\n            }}\r\n          >\r\n            <Box sx={{ textAlign: 'center', width: '100%' }}>\r\n              <TextField \r\n                size=\"small\" \r\n                placeholder=\"Paste image URL here\" \r\n                fullWidth \r\n                variant=\"standard\"\r\n                value={imageUrl}\r\n                onChange={(e) => setImageUrl(e.target.value)}\r\n                onBlur={handleUrlPaste}\r\n                onKeyPress={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    handleUrlPaste(e);\r\n                  }\r\n                }}\r\n                InputProps={{\r\n                  disableUnderline: true,\r\n                }}\r\n                sx={{\r\n                  paddingLeft:\"10px\",\r\n                  '& .MuiInputBase-root': {\r\n                    borderBottom: 'none',\r\n                  },\r\n                }}\r\n              />\r\n            </Box>\r\n          </Paper>\r\n         \r\n    { files?.length > 0 &&     (<Box sx={{ display: 'flex', margin:0,p:0, alignItems: 'center', justifyContent: 'flex-end' }}>\r\n  <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.2 }}>\r\n  <Typography variant=\"body2\">Preview Thumbnail</Typography>\r\n    <Switch\r\n    size='small'\r\n      checked={showThumbnail}\r\n      onChange={(e) => setShowThumbnail(e.target.checked)}\r\n    />\r\n    \r\n  </Box>\r\n</Box>)\r\n}\r\n\r\n{files?.length > 0 && (\r\n  <>\r\n <Stack\r\n  sx={{\r\n    height: \"100px\",\r\n    overflow: 'hidden',\r\n    // border: '1px solid #e0e0e0', // Optional: adds a border to visually define the area\r\n    // borderRadius: 1, // Optional: rounds the corners\r\n  }}\r\n>\r\n  <Box\r\n    sx={{\r\n      height: '100%',\r\n      overflowY: 'auto',\r\n      p: 1,\r\n    }}\r\n  >\r\n    {!showThumbnail ? (\r\n      <Grid container spacing={1} sx={{ minHeight: '100%' }}>\r\n        {files?.map((file, index) => (\r\n          <Grid item xs={4} key={index} sx={{ marginBottom: 1 }}>\r\n            <Box\r\n              sx={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                paddingTop: '60px',\r\n                borderRadius: 1,\r\n                overflow: 'hidden',\r\n              }}\r\n            >\r\n              {file.type.startsWith('image/') ? (\r\n                <Box\r\n                  component=\"img\"\r\n                  src={URL.createObjectURL(file)}\r\n                  alt={file.name}\r\n                  sx={{\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    objectFit: 'cover',\r\n                  }}\r\n                />\r\n              ) : (\r\n                <Box\r\n                  sx={{\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    bgcolor: '#00A76F',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    color: 'white',\r\n                  }}\r\n                >\r\n                  <ImageIcon sx={{ fontSize: 20 }} />\r\n                </Box>\r\n              )}\r\n              <IconButton\r\n                size=\"small\"\r\n                onClick={() => removeFile(index)}\r\n                sx={{\r\n                  position: 'absolute',\r\n                  top: 2,\r\n                  right: 2,\r\n                  color: '#fff',\r\n                  bgcolor: 'rgba(0, 0, 0, 0.5)',\r\n                  '&:hover': {\r\n                    bgcolor: 'rgba(0, 0, 0, 0.7)',\r\n                  },\r\n                  padding: '2px',\r\n                }}\r\n              >\r\n                <CloseIcon sx={{ fontSize: 12 }} />\r\n              </IconButton>\r\n              <IconButton\r\n                size=\"small\"\r\n                onClick={() => handleEnlarge(file)}\r\n                sx={{\r\n                  position: 'absolute',\r\n                  bottom: 2,\r\n                  right: 2,\r\n                  color: '#fff',\r\n                  bgcolor: 'rgba(0, 0, 0, 0.5)',\r\n                  '&:hover': {\r\n                    bgcolor: 'rgba(0, 0, 0, 0.7)',\r\n                  },\r\n                  padding: '2px',\r\n                }}\r\n              >\r\n                {/* <ZoomInIcon sx={{ fontSize: 12 }} /> */}\r\n                <img src={ExpandIcon}               \r\n                alt=\"Expand Logo\"\r\n                style={{\r\n                  width: \"15px\",\r\n                }}\r\n                />\r\n              </IconButton>\r\n            </Box>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    ) : (\r\n      <Stack spacing={1} sx={{ minHeight: '100%' }}>\r\n        {files?.map((file, index) => (\r\n          <Box\r\n            key={index}\r\n            sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 1,\r\n              p: 0.5,\r\n              bgcolor: '#f8f9fa',\r\n              borderRadius: 1,\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                width: 20,\r\n                height: 20,\r\n                bgcolor: '#00A76F',\r\n                borderRadius: 0.5,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                color: 'white',\r\n              }}\r\n            >\r\n              <ImageIcon sx={{ fontSize: 12 }} />\r\n            </Box>\r\n            <Box sx={{ flexGrow: 1, minWidth: 0 }}>\r\n              <Typography\r\n                variant=\"caption\"\r\n                sx={{\r\n                  color: '#212B36',\r\n                  fontWeight: 500,\r\n                  display: 'block',\r\n                  overflow: 'hidden',\r\n                  textOverflow: 'ellipsis',\r\n                  whiteSpace: 'nowrap',\r\n                }}\r\n              >\r\n                {file?.name}\r\n              </Typography>\r\n              <Typography\r\n                variant=\"caption\"\r\n                sx={{\r\n                  color: '#637381',\r\n                  fontSize: '0.6rem',\r\n                }}\r\n              >\r\n                {(file.size / 1024 / 1024).toFixed(2)} Mb\r\n              </Typography>\r\n            </Box>\r\n            <IconButton\r\n              size=\"small\"\r\n              onClick={() => removeFile(index)}\r\n              sx={{\r\n                color: '#637381',\r\n                '&:hover': {\r\n                  color: '#212B36',\r\n                },\r\n                padding: 0,\r\n              }}\r\n            >\r\n              <CloseIcon sx={{ fontSize: 12 }} />\r\n            </IconButton>\r\n          </Box>\r\n        ))}\r\n      </Stack>\r\n    )}\r\n  </Box>\r\n</Stack>\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        alignItems: 'flex-end',\r\n        mt: 2,\r\n      }}\r\n    >\r\n       {/* <Tooltip title=\"reset\" arrow>\r\n      <RestartAltIcon  onClick={removeAll} sx={{ fontSize: 30, cursor: 'pointer' }} />\r\n    </Tooltip> */}\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"error\"\r\n        size=\"small\"\r\n        sx={{\r\n          color: '#637381',\r\n          borderColor: '#637381',\r\n          '&:hover': {\r\n            borderColor: '#212B36',\r\n            color: '#212B36',\r\n          },\r\n        }}\r\n        onClick={removeAll}\r\n      >\r\n        Clear All\r\n      </Button>\r\n    </Box>\r\n  </>\r\n)}\r\n\r\n        </Stack>\r\n      </CardContent>\r\n     \r\n      \r\n\r\n\r\n<Dialog\r\n      open={!!enlargedImage}\r\n      onClose={handleCloseEnlarged}\r\n      maxWidth={false}\r\n      fullWidth\r\n      PaperProps={{\r\n        style: {\r\n          backgroundColor: 'transparent',\r\n          boxShadow: 'none',\r\n          margin: 0,\r\n          width: '30%',\r\n          maxWidth: '30%',\r\n        },\r\n      }}\r\n      BackdropProps={{\r\n        style: {\r\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        },\r\n      }}\r\n    >\r\n      <DialogContent\r\n        className=\"p-0 flex justify-center items-center\"\r\n        style={{\r\n          padding: 0,\r\n          height: '100vh',\r\n          width: '100%',\r\n          maxWidth: '100%',\r\n          maxHeight: '40vh',\r\n          margin: 0,\r\n        }}\r\n      >\r\n        <img\r\n          src={enlargedImage}\r\n          alt=\"Enlarged view\"\r\n          className=\"w-full h-full object-contain\"\r\n          style={{\r\n            width: '90%',\r\n            height: '90%',\r\n          }}\r\n        />\r\n      </DialogContent>\r\n    </Dialog>\r\n\r\n      \r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MultiFileUpload;\r\n\r\n\r\n\r\n","\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { Button, Typography, Box, Autocomplete, TextField } from '@mui/material';\r\nimport View from \"./View\";\r\nimport MultiFileUpload from './MultiFileUpload';\r\nimport AutoAwesomeIcon from '@mui/icons-material/AutoAwesome';\r\nimport Logo from './../assets/images/logo.png';\r\nimport Generate from './../assets/images/generate.png'\r\nimport BackImage from './../assets/images/upload-png.png';\r\nimport { io } from \"socket.io-client\";\r\nimport axios from 'axios';\r\nimport jsPDF from \"jspdf\";\r\nimport { marked } from \"marked\";\r\nimport html2canvas from \"html2canvas\";\r\nimport { PDFDocument } from \"pdf-lib\"; // To merge PDF files\r\n\r\nconst Home = () => {\r\n  const [loader,setLoader]=useState(false)\r\n  const list = [\r\n    { name: \"Claude-3.5-Sonnet\", Id: \"claude\" },\r\n    { name: \"GPT-4o\", Id: \"openai\" },\r\n    { name: \"Gemini-1.5-flash\", Id: \"gemini\" },\r\n    \r\n    // { name: \"GPT 3\", Id: \"3\" }\r\n  ];\r\n  const [count, setCount]=useState(1)\r\n\r\n  const [fullScreen, setFullScreen] = useState(false);\r\n  const [selectedModel, setSelectedModel] = useState(list[0]);\r\n  const [filesData, setFilesData] = useState([]);\r\n  const [socketTrue, setSocketTrue] = useState(false);\r\n  const [streamData, setStreamData] = useState(null);\r\n  const socketRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const wsRef = useRef(null);\r\n  const isConnectedRef = useRef(false);\r\nconsole.log(streamData,fullScreen,\"suruuu\")\r\n  const initializeSocket = async() => {\r\n    // Initialize socket connection\r\n    const client = new WebSocket(\"ws://192.168.1.81:8000\");\r\n\r\n    wsRef.current = client; // Store the WebSocket instance in a ref\r\n\r\n    client.onopen = () => {\r\n      console.log('Connected to WebSocket server');\r\n      isConnectedRef.current = true; // Set connection state flag on successful open\r\n      const initMessage = {\r\n        message: 'init',\r\n       \r\n      };\r\n      client.send(JSON.stringify(initMessage));\r\n    };\r\n\r\n\r\n\r\n    socketRef.current = io(\"https://192.168.1.81:8000\", {\r\n      transports: [\"websocket\"], // Use websocket as the transport method\r\n      // You can add any other options as needed here\r\n    });\r\n\r\n    socketRef.current.on(\"connect\", () => {\r\n      console.log(\"Connected to server\");\r\n      \r\n      // Send initial analysis request with files\r\n      sendAnalysisRequest();\r\n      \r\n      // Set up interval for periodic requests\r\n      intervalRef.current = setInterval(() => {\r\n        sendAnalysisRequest();\r\n      }, 5000);\r\n    });\r\n\r\n    socketRef.current.on(\"chunk\", (data) => {\r\n      console.log(\"Received chunk:\", data.data);\r\n      setStreamData(prevData => prevData ? prevData + data.data : data.data);\r\n    });\r\n\r\n    socketRef.current.on(\"completed\", () => {\r\n      console.log(\"Analysis completed\");\r\n      // Clear interval when analysis is complete\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    });\r\n\r\n    socketRef.current.on(\"error\", (error) => {\r\n      console.error(\"Error:\", error.message);\r\n    });\r\n  };\r\n\r\n  const sendAnalysisRequest = () => {\r\n    if (socketRef.current && filesData.length > 0) {\r\n      const formData = new FormData();\r\n      filesData.forEach((file) => {\r\n        formData.append('images', file);\r\n      });\r\n      formData.append('model', 'claude');\r\n\r\n      socketRef.current.emit(\"analyze\", {\r\n        model: \"claude\",\r\n        formData: formData\r\n      });\r\n    }\r\n  };\r\nconst [firstUpload, setFirstUpload]=useState(false)\r\n  const handleFullScreen = async () => {\r\n    setFullScreen(true);\r\n    setSocketTrue(true);\r\n    setCount(fullScreen?count+1:0)\r\n\r\n    \r\n    try {\r\n         // Then initialize socket connection\r\n        //  await initializeSocket();\r\n      // First make the initial API call\r\n      await handleApiCall(filesData);\r\n      \r\n      // Then initialize socket connection\r\n    //    initializeSocket();\r\n    } catch (error) {\r\n      console.error(\"Error in handleFullScreen:\", error);\r\n    }\r\n  };\r\nconst [buttonDisable,setButtonDisable]=useState(true)\r\nconsole.log(\"llllllll\",buttonDisable,filesData)\r\n  const handleImageData = (data) => {\r\n  \r\n    \r\n\r\n    if(data && data?.length > 0){\r\n      setButtonDisable(false)\r\n      console.log(\"lllllllllllkkk\",buttonDisable,data?.length)\r\n      if (!fullScreen){\r\n        setFirstUpload(true)\r\n      }\r\n      console.log(fullScreen,firstUpload,\"fullScreen\")\r\n    }\r\n    \r\n    console.log(\"lllllllllll\",buttonDisable,data?.length)\r\n    setFilesData(data);\r\n  };\r\nconst handleClearData=(data)=>{\r\n  console.log(data,\"llllmmmmm\")\r\n  setFilesData([]);\r\n  setButtonDisable(true)\r\n}\r\nconst[holdButton,setHoldButton]=useState(false)\r\nconsole.log(holdButton,buttonDisable,\"buttonDisable\")\r\nconst handleHoldButton=()=>{\r\n  setHoldButton(false)\r\n\r\n}\r\n  const handleApiCall = async (Data) => {\r\n    try {\r\n      console.log(selectedModel,\"selectedModel\")\r\n      const formData = new FormData();\r\n      \r\n      if (Data && Array.isArray(Data)) {\r\n        Data.forEach((file) => {\r\n          formData.append('images', file);\r\n        });\r\n      }\r\n      \r\n      formData.append('model', selectedModel?.Id);\r\n      setLoader(true)\r\n      setHoldButton(true)\r\n      const response = await axios.post(\r\n        // 'http://192.168.1.81:8000/api/v1/analyze/stream',\r\n        // 'http://localhost:8000/api/v1/analyze/stream',\r\n        `https://waytool.thankfulriver-bb957f46.koreacentral.azurecontainerapps.io/api/v1/analyze/stream`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n        }\r\n      );\r\n\r\n      setStreamData(response.data);\r\n      setLoader(true)\r\n    } catch (error) {\r\n      console.error('API request failed:', error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Cleanup socket connection when component unmounts or when fullScreen is turned off\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n      }\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n \r\n// download pdf \r\n\r\n// const downloadPDF = async () => {\r\n//   try {\r\n//     const pdf = new jsPDF();\r\n//     const pageHeight = pdf.internal.pageSize.height;\r\n//     const pageWidth = pdf.internal.pageSize.width;\r\n//     const margin = 10; // Margin around the image\r\n//     let yOffset = margin; // Start at the top margin\r\n\r\n//     for (let i = 0; i < filesData.length; i++) {\r\n//       const file = filesData[i];\r\n      \r\n//       // Convert File object to data URL\r\n//       const dataUrl = await new Promise((resolve, reject) => {\r\n//         const reader = new FileReader();\r\n//         reader.onload = () => resolve(reader.result);\r\n//         reader.onerror = reject;\r\n//         reader.readAsDataURL(file);\r\n//       });\r\n\r\n//       // Create temporary image element\r\n//       const img = new Image();\r\n//       await new Promise((resolve, reject) => {\r\n//         img.onload = resolve;\r\n//         img.onerror = reject;\r\n//         img.src = dataUrl;\r\n//       });\r\n\r\n//       // Calculate dimensions while maintaining aspect ratio\r\n//       const imgAspectRatio = img.width / img.height;\r\n//       const imgWidth = pageWidth - 2 * margin;\r\n//       const imgHeight = imgWidth / imgAspectRatio;\r\n\r\n//       // Check if image fits on current page; if not, add new page\r\n//       if (yOffset + imgHeight > pageHeight - margin) {\r\n//         pdf.addPage();\r\n//         yOffset = margin; // Reset yOffset for new page\r\n//       }\r\n\r\n//       // Add image to PDF\r\n//       pdf.addImage(\r\n//         dataUrl,\r\n//         'JPEG',\r\n//         margin,\r\n//         yOffset,\r\n//         imgWidth,\r\n//         imgHeight\r\n//       );\r\n\r\n//       yOffset += imgHeight + margin; // Update yOffset for next image\r\n//     }\r\n\r\n//     // Save the PDF\r\n//     pdf.save(\"images.pdf\");\r\n//   } catch (error) {\r\n//     console.error(\"Error generating PDF:\", error);\r\n//     alert(\"Error generating PDF. Please check your images and try again.\");\r\n//   }\r\n// };\r\n\r\n// version 2 download\r\nasync function convertSvgToPng(dataUrl) {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    img.src = dataUrl;\r\n    img.onload = () => {\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(img, 0, 0);\r\n      resolve(canvas.toDataURL(\"image/png\"));\r\n    };\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n// const downloadPDF = async () => {\r\n//   try {\r\n//     const pdf = new jsPDF();\r\n//     const pageHeight = pdf.internal.pageSize.height;\r\n//     const pageWidth = pdf.internal.pageSize.width;\r\n//     const margin = 10;\r\n//     let yOffset = margin;\r\n\r\n//     for (let i = 0; i < filesData.length; i++) {\r\n//       const file = filesData[i];\r\n//       const fileType = file.type;\r\n\r\n//       if (fileType.startsWith(\"image/\")) {\r\n//         let dataUrl;\r\n        \r\n//         if (fileType === \"image/svg+xml\") {\r\n//           // Convert SVG to PNG\r\n//           dataUrl = await convertSvgToPng(await readFileAsDataUrl(file));\r\n//         } else {\r\n//           // Read image file as data URL\r\n//           dataUrl = await readFileAsDataUrl(file);\r\n//         }\r\n\r\n//         const img = new Image();\r\n//         await new Promise((resolve, reject) => {\r\n//           img.onload = resolve;\r\n//           img.onerror = reject;\r\n//           img.src = dataUrl;\r\n//         });\r\n\r\n//         // Calculate dimensions\r\n//         const imgAspectRatio = img.width / img.height;\r\n//         const imgWidth = pageWidth - 2 * margin;\r\n//         const imgHeight = imgWidth / imgAspectRatio;\r\n\r\n//         if (yOffset + imgHeight > pageHeight - margin) {\r\n//           pdf.addPage();\r\n//           yOffset = margin;\r\n//         }\r\n\r\n//         pdf.addImage(dataUrl, \"JPEG\", margin, yOffset, imgWidth, imgHeight);\r\n//         yOffset += imgHeight + margin;\r\n\r\n//       } else if (fileType === \"application/pdf\") {\r\n//         // Merge PDFs\r\n//         const existingPdfBytes = await file.arrayBuffer();\r\n//         const existingPdf = await PDFDocument.load(existingPdfBytes);\r\n//         const copiedPages = await pdf.copyPages(existingPdf, existingPdf.getPageIndices());\r\n\r\n//         copiedPages.forEach((page) => {\r\n//           pdf.addPage(page);\r\n//         });\r\n//       }\r\n//     }\r\n\r\n//     pdf.save(\"merged_document.pdf\");\r\n//   } catch (error) {\r\n//     console.error(\"Error generating PDF:\", error);\r\n//     alert(\"Error generating PDF. Please check your files and try again.\");\r\n//   }\r\n// };\r\n\r\n// async function readFileAsDataUrl(file) {\r\n//   return new Promise((resolve, reject) => {\r\n//     const reader = new FileReader();\r\n//     reader.onload = () => resolve(reader.result);\r\n//     reader.onerror = reject;\r\n//     reader.readAsDataURL(file);\r\n//   });\r\n// }\r\n\r\n// versionv3\r\n// Helper function to render markdown as an image with larger text\r\nconst renderMarkdownToImage = async (markdownText) => {\r\n  // Convert markdown to HTML\r\n  const htmlContent = marked(markdownText);\r\n\r\n  // Create a hidden div to render the HTML content\r\n  const container = document.createElement(\"div\");\r\n  container.innerHTML = htmlContent;\r\n\r\n  // Apply some styling to the container to increase font size\r\n  container.style.position = \"absolute\";\r\n  container.style.left = \"-9999px\"; // Hide it offscreen\r\n  container.style.fontSize = \"18px\"; // Increase text size\r\n  container.style.lineHeight = \"1.6\"; // Adjust line height for readability\r\n  container.style.fontFamily = \"Arial, sans-serif\"; // Use a common font\r\n  container.style.width = \"100%\"; // Allow it to stretch to fit the content\r\n\r\n  // Append to the body temporarily to render\r\n  document.body.appendChild(container);\r\n\r\n  // Render the container as an image\r\n  const canvas = await html2canvas(container);\r\n  document.body.removeChild(container); // Clean up after rendering\r\n  return canvas.toDataURL(\"image/png\");\r\n};\r\n\r\n// Function to read file as data URL\r\nasync function readFileAsDataUrl(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = reject;\r\n    reader.readAsDataURL(file);\r\n  });\r\n}\r\n\r\nconst downloadPDF = async () => {\r\n  try {\r\n    const pdf = new jsPDF();\r\n    const pageHeight = pdf.internal.pageSize.height;\r\n    const pageWidth = pdf.internal.pageSize.width;\r\n    const margin = 10; // Margin around the content\r\n    let yOffset = margin;\r\n\r\n    // 1. Add images to the PDF\r\n    for (let i = 0; i < filesData.length; i++) {\r\n      const file = filesData[i];\r\n      const fileType = file.type;\r\n\r\n      if (fileType.startsWith(\"image/\")) {\r\n        let dataUrl;\r\n        \r\n        if (fileType === \"image/svg+xml\") {\r\n          dataUrl = await convertSvgToPng(await readFileAsDataUrl(file));\r\n        } else {\r\n          dataUrl = await readFileAsDataUrl(file);\r\n        }\r\n\r\n        const img = new Image();\r\n        await new Promise((resolve, reject) => {\r\n          img.onload = resolve;\r\n          img.onerror = reject;\r\n          img.src = dataUrl;\r\n        });\r\n\r\n        // Calculate dimensions without enlarging images\r\n        const imgAspectRatio = img.width / img.height;\r\n        const maxImgWidth = pageWidth - 2 * margin;\r\n        const imgWidth = Math.min(img.width, maxImgWidth);\r\n        const imgHeight = imgWidth / imgAspectRatio;\r\n\r\n        if (yOffset + imgHeight > pageHeight - margin) {\r\n          pdf.addPage();\r\n          yOffset = margin;\r\n        }\r\n\r\n        pdf.addImage(dataUrl, \"JPEG\", margin, yOffset, imgWidth, imgHeight);\r\n        yOffset += imgHeight + margin;\r\n      } else if (fileType === \"application/pdf\") {\r\n        const existingPdfBytes = await file.arrayBuffer();\r\n        const existingPdf = await PDFDocument.load(existingPdfBytes);\r\n        const copiedPages = await pdf.copyPages(existingPdf, existingPdf.getPageIndices());\r\n\r\n        copiedPages.forEach((page) => {\r\n          pdf.addPage(page);\r\n        });\r\n      }\r\n    }\r\n\r\n    // 2. Render markdown content as image and add it to PDF\r\n    if (streamData) {\r\n      const markdownImage = await renderMarkdownToImage(streamData);\r\n\r\n      // Add a new page if necessary for the markdown content\r\n      if (yOffset + pageHeight > pageHeight - margin) {\r\n        pdf.addPage();\r\n        yOffset = margin;\r\n      }\r\n\r\n      // Add markdown image to the PDF\r\n      pdf.addImage(markdownImage, \"PNG\", margin, yOffset, pageWidth - 2 * margin, 0);\r\n    }\r\n\r\n    // Save the PDF\r\n    pdf.save(\"report_with_images_and_text.pdf\");\r\n  } catch (error) {\r\n    console.error(\"Error generating PDF:\", error);\r\n    alert(\"Error generating PDF. Please check your files and try again.\");\r\n  }\r\n};\r\n\r\n  // Rest of your component JSX remains the same...\r\n  return (\r\n    <Box sx={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>\r\n      {/* Fixed Header */}\r\n      <Box \r\n        sx={{ \r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          height: '60px',\r\n          zIndex: 1000,\r\n          backgroundColor: 'white',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          padding: '0 20px'\r\n        }}\r\n      >\r\n        <img\r\n          src={Logo}\r\n          // src={Generate}\r\n          alt=\"Company Logo\"\r\n          style={{\r\n            width: \"150px\",\r\n          }}\r\n        />\r\n      </Box>\r\n\r\n      {/* Main Content Area */}\r\n      <Box\r\n        sx={{\r\n          flexGrow: 0.5,\r\n          marginTop: '60px', // Match header height\r\n          backgroundImage: `url(${BackImage})`,\r\n          backgroundSize: 'cover',\r\n          backgroundPosition: 'center',\r\n          backgroundRepeat: 'no-repeat',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          height: 'calc(100vh - 60px)', // Subtract header height\r\n          overflow: 'hidden' // Prevent overall page scroll\r\n        }}\r\n      >\r\n        {/* Left Panel */}\r\n        <Box\r\n          sx={{\r\n            padding:1,\r\n            // pt:5,\r\n            width: fullScreen ? \"30%\" : \"40%\",\r\n            height: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column'\r\n          }}\r\n        >\r\n          {/* Fixed Content Area */}\r\n          <Box sx={{ flexShrink: 0 }}>\r\n            <Typography \r\n              variant=\"h6\" \r\n              sx={{\r\n                fontWeight: 400,\r\n                fontFamily: 'Roboto, sans-serif',\r\n                fontSize: fullScreen ? \"25px\" : \"30px\",\r\n                marginBottom: 0.3\r\n              }}\r\n            >\r\n              Way.com Visual Assessment Tool\r\n            </Typography>\r\n            {/* <button onClick={downloadPDF}>Download All Images as PDF</button> */}\r\n            \r\n            <Autocomplete\r\n              size=\"small\"\r\n              disableClearable\r\n              options={list}\r\n              getOptionLabel={(option) => option.name}\r\n              value={selectedModel}\r\n              onChange={(event, newValue) => {\r\n                setSelectedModel(newValue);\r\n              }}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    ...params.InputProps,\r\n                    sx: {\r\n                      borderRadius: '30px',\r\n                      width: fullScreen ? \"53%\" : \"40%\",\r\n                      backgroundColor: \"black\",\r\n                      color: \"white\",\r\n                      '& .MuiSvgIcon-root': {\r\n                        color: 'white',\r\n                      }\r\n                    },\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Box>\r\n\r\n          {/* Scrollable Upload Area */}\r\n          <Box \r\n            sx={{\r\n              marginTop: !firstUpload?3:1,\r\n              // p:?1:0,\r\n              // p:!firstUpload?3:0,\r\n              flexGrow: 1,\r\n              // overflow: 'auto',\r\n              height: 0, // This forces the box to scroll\r\n              minHeight: '100px' // Ensure minimum height for content\r\n            }}\r\n          >\r\n            <MultiFileUpload \r\n              handleData={handleImageData} \r\n              load={fullScreen}  \r\n              // singlePage={count}\r\n              singlePage={firstUpload}\r\n              handleClear={handleClearData}\r\n            />\r\n          </Box>\r\n\r\n          {/* Fixed Button Area */}\r\n          <Box \r\n            sx={{\r\n              flexShrink: 0,\r\n              padding: \"10px\",\r\n              backgroundColor: 'inherit',\r\n              textAlign: 'center'\r\n            }}\r\n          >\r\n           <Button \r\n  onClick={handleFullScreen} \r\n  variant=\"contained\" \r\n  color=\"primary\" \r\n  disabled={buttonDisable || holdButton}\r\n  startIcon={\r\n    <Box\r\n      component=\"img\"\r\n     src={Generate}\r\n      alt=\"Company Logo\"\r\n      sx={{\r\n        width: \"24px\", // Adjust as needed\r\n        height: \"24px\",\r\n      }}\r\n    />\r\n  }\r\n  sx={{\r\n    borderRadius: \"50px\",\r\n    transition: \"opacity 0.3s ease, transform 0.3s ease\",\r\n    opacity: buttonDisable || holdButton ? 0.5 : 1,\r\n    transform: buttonDisable || holdButton ? \"scale(0.95)\" : \"scale(1)\"\r\n  }}\r\n>\r\n  Generate\r\n</Button>\r\n\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* Right Panel */}\r\n        {fullScreen && (\r\n          <Box\r\n            sx={{\r\n              padding: 0.7,\r\n              // margin:1,\r\n              width: \"65%\",\r\n              height: '100%',\r\n              overflowY: 'auto'\r\n            }}\r\n          >\r\n            <View \r\n              data={streamData}  \r\n              load={loader} \r\n              refresh={count} \r\n              hold={handleHoldButton}\r\n              download={downloadPDF}\r\n            />\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n"],"names":["_ref","data","load","refresh","hold","download","loader","setLoader","useState","displayText","setDisplayText","isTyping","setIsTyping","progress","setProgress","containerRef","useRef","bottomRef","useEffect","console","log","currentIndex","streamText","length","prev","delay","char","includes","setTimeout","current","scrollIntoView","behavior","_jsxs","Stack","sx","width","mx","mt","children","_jsx","Skeleton","height","color","animation","className","ref","style","textAlign","fontFamily","Card","margin","marginTop","borderRadius","position","CardContent","ReactMarkdown","remarkPlugins","remarkGfm","components","Button","boxShadow","variant","onClick","e","handleData","handleClear","singlePage","files","setFiles","showThumbnail","setShowThumbnail","dragActive","setDragActive","error","setError","imageUrl","setImageUrl","enlargedImage","setEnlargedImage","handleUrlPaste","async","url","target","value","trim","match","isValidImageUrl","file","response","fetch","blob","fileName","substring","lastIndexOf","File","type","Error","createFileFromUrl","isDuplicateFile","name","prevFiles","newFile","some","existingFile","size","processFiles","newFiles","duplicates","validFiles","Array","from","forEach","push","join","handleDrag","preventDefault","stopPropagation","removeFile","indexToRemove","updatedFiles","filter","_","index","Box","maxWidth","p","pt","spacing","Alert","severity","onClose","Paper","backgroundColor","border","borderColor","cursor","display","flexDirection","alignItems","gap","onDragEnter","onDragLeave","onDragOver","onDrop","dataTransfer","bgcolor","justifyContent","CloudUploadIcon","fontSize","mb","Typography","textDecoration","hidden","multiple","onChange","padding","alignSelf","TextField","placeholder","fullWidth","onBlur","onKeyPress","key","InputProps","disableUnderline","paddingLeft","borderBottom","Switch","checked","_Fragment","overflow","overflowY","minHeight","map","ImageIcon","flexGrow","minWidth","fontWeight","textOverflow","whiteSpace","toFixed","IconButton","CloseIcon","Grid","container","item","xs","marginBottom","paddingTop","startsWith","component","src","URL","createObjectURL","alt","top","left","objectFit","right","handleEnlarge","bottom","removeAll","Dialog","open","handleCloseEnlarged","PaperProps","BackdropProps","DialogContent","maxHeight","Home","list","Id","count","setCount","fullScreen","setFullScreen","selectedModel","setSelectedModel","filesData","setFilesData","socketTrue","setSocketTrue","streamData","setStreamData","socketRef","intervalRef","firstUpload","setFirstUpload","buttonDisable","setButtonDisable","holdButton","setHoldButton","handleApiCall","formData","FormData","Data","isArray","append","axios","post","headers","message","convertSvgToPng","dataUrl","Promise","resolve","reject","img","Image","onload","canvas","document","createElement","getContext","drawImage","toDataURL","onerror","disconnect","clearInterval","readFileAsDataUrl","reader","FileReader","result","readAsDataURL","zIndex","Logo","backgroundImage","BackImage","backgroundSize","backgroundPosition","backgroundRepeat","flexShrink","Autocomplete","disableClearable","options","getOptionLabel","option","event","newValue","renderInput","params","MultiFileUpload","disabled","startIcon","transition","opacity","transform","View","handleHoldButton","pdf","jsPDF","pageHeight","internal","pageSize","pageWidth","yOffset","i","fileType","imgAspectRatio","maxImgWidth","imgWidth","Math","min","imgHeight","addPage","addImage","existingPdfBytes","arrayBuffer","existingPdf","PDFDocument","copyPages","getPageIndices","page","markdownImage","htmlContent","marked","markdownText","innerHTML","lineHeight","body","appendChild","html2canvas","removeChild","renderMarkdownToImage","save","alert"],"sourceRoot":""}